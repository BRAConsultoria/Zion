<?phpnamespace Zion\Arquivo;class ArquivoUpload extends ManipulaImagem{    /*     * $cFG  = Array de Configurações     * $codigoReferencia = Código de referencia da tabela Pai     * $operacao = Cad, Alt     * $tratarComo = Imagem ou Arquivo. Com imagem é possivel criar tumb e redimencionar     */    public function sisUpload($cFG, $codigoReferencia, $operacao, $tratarComo = "Arquivo")    {        //Inicia Conexão        $con = Conexao::conectar();        ####Recuperando Configurações        $campoImagem = ($operacao == "Alt") ? $cFG['Nome'] . $codigoReferencia : $cFG['Nome']; //Campo de Imagem        $tabela = $cFG['Tabela']; //Tabela onde deve ser gravada as informações do arquivo        $status = $cFG['Status']; //Status do Campo        $prefixo = $cFG['Prefixo']; //Texto de Prefixo para o arquivo        $sufixo = $cFG['Sufixo']; //Texto de Sufixo para o arquivo        $nomeFixo = $cFG['NomeFixo']; //Nome fixo do arquivo        $diretorioDestino = $cFG['DiretorioDestino']; //Destino do arquivo        $diretorioDestinoTB = $cFG['DiretorioDestinoTB']; //Destino Tumb        $alturaMaxima = $cFG['AlturaMaxima']; //Altura maxima da imagem        $larguraMaxima = $cFG['LarguraMaxima']; //Largura Maxima da Imagem        $alturaMaximaTB = $cFG['AlturaMaximaTB']; //Altura maxima da imagem        $larguraMaximaTB = $cFG['LarguraMaximaTB']; //Largura Maxima da Imagem        $qualidadeImagem = $cFG['QualidadeImagem']; //Qualidade da imagem        $extensaoPermitida = $cFG['ExtensaoPermitida']; //Extensões de Arquivos Permitidas        $extensaoNaoPermitida = $cFG['ExtensaoNaoPermitida']; //Extensões de Arquivos Não Permitidas        $tamanhoMaximo = $cFG['TamanhoMaximo']; //Tamanho Maximo Permitido em bytes        $minimoArquivos = $cFG['MinimoArquivos']; //Numero minimo de arquivos que devem ser selecionados        $maximoArquivos = $cFG['MaximoArquivos']; //Numero maximo de arquivos que podem ser selecionados        $permitirDuplicados = $cFG['PermitirDuplicados']; //Indica se é permitido ou não arquivos com nomes duplicados        $habilitarPrincipal = $cFG['HabilitarPrincipal']; //Habilita Seleção de Arquivo como Principal        //Se status é false nem faz nada        if ($status === false)            return;        //Inicio da manipulação        $arquivos = $_FILES[$campoImagem];        $totalDoForm = count($_FILES[$campoImagem]['name']);        $tratarComoUpper = strtoupper($tratarComo);        $upsPermitido = ini_get("max_file_uploads");        //Maximo de uploads ultrapassado - Existem servidorem que não retornan esse parametro        if ($totalDoForm > $upsPermitido and ! empty($upsPermitido))            throw new Exception("Seu servidor permite envio de no maximo " . $upsPermitido . " arquivos simultaneos, remova alguns arquivos e tente novamente.");        //Verifica Diretórios        if (!is_dir($diretorioDestino))            throw new Exception("O diretório de destino informado não existe.");        if ($diretorioDestinoTB != "" and ! is_dir($diretorioDestinoTB))            throw new Exception("O diretório de destino informado para o thumbnail não existe.");        //Se for alteração somar com arquivos existentes no banco        if ($operacao == "Alt") {            //Iniciando Vetores            $nomesDoBanco = array();            $arquivosDoBanco = array();            $arquivosQueFicam = array();            $arquivosARemover = array();            //Cria vetor com arquivos que devem permanecer            if (is_array($_POST[$campoImagem . "Removidos"])) {                foreach ($_POST[$campoImagem . "Removidos"] as $chaveMarcada) {                    $arquivosQueFicam[] = $chaveMarcada;                    //Atualiza Informações dos Que Ficam                    $principal = ($_POST[$campoImagem . "Principal"] == $chaveMarcada and $habilitarPrincipal == true) ? 'S' : 'N';                    $con->executar("UPDATE " . $tabela . " SET Principal = '$principal' WHERE ArquivoCod = $chaveMarcada");                }            }            $rS = $con->executar("SELECT ArquivoCod, Nome FROM " . $tabela . " WHERE CodigoReferencia = $codigoReferencia");            while ($dadosBanco = $rS->fetch_array()) {                $nomesDoBanco[] = $dadosBanco['Nome'];                $arquivosDoBanco[] = $dadosBanco['ArquivoCod'];            }            if ($maximoArquivos{0} == "+") {                $totalArquivos = $totalDoForm;                $maximoArquivos = substr($maximoArquivos, 1);            } else {                $totalArquivos = count($nomesDoBanco) + $totalDoForm;            }            //Define Arquivos que serão removidos            $arquivosARemover = array_diff($arquivosDoBanco, $arquivosQueFicam);        } else {            $totalArquivos = $totalDoForm;        }        if ($minimoArquivos != "" and $totalArquivos < $minimoArquivos)            throw new Exception("Você deve selecionar no minimo " . $minimoArquivos . " arquivo" . (($minimoArquivos > 1) ? "s." : "."));        if ($maximoArquivos != "" and $totalArquivos > $maximoArquivos)            throw new Exception("$totalArquivos Você deve selecionar no maximo " . $maximoArquivos . " arquivo" . (($maximoArquivos > 1) ? "s." : "."));        //Usuario selecionou arquivos        if (is_array($_POST[$campoImagem . 'IdDaTela'])) {            foreach ($_POST[$campoImagem . 'IdDaTela'] as $posicao) {                if (empty($_FILES[$campoImagem]['name'][$posicao]))                    continue;                //Verifica Duplicações                if ($operacao == "Alt" and $permitirDuplicados === false) {                    if (in_array($_FILES[$campoImagem]['name'][$posicao], $nomesDoBanco))                        throw new Exception("O arquivo " . $_FILES[$campoImagem]['name'][$posicao] . " já existe no servidor.");                }                //Verifica extenssão                $extensao = strtolower($this->extenssaoArquivo($_FILES[$campoImagem]['name'][$posicao]));                if (is_array($extensaoPermitida)) {                    $extensaoPermitida = array_map(strtolower, $extensaoPermitida);                    if (!in_array($extensao, $extensaoPermitida))                        throw new Exception("Extensão para o arquivo " . $_FILES[$campoImagem]['name'][$posicao] . " não é permitida. Use somente:" . implode(", ", $extensaoPermitida));                }                if (is_array($extensaoNaoPermitida)) {                    $extensaoNaoPermitida = array_map(strtolower, $extensaoNaoPermitida);                    if (in_array($extensao, $extensaoNaoPermitida))                        throw new Exception("Extensão para o arquivo " . $_FILES[$campoImagem]['name'][$posicao] . " não é permitida.");                }                if ($tamanhoMaximo and $_FILES[$campoImagem]['size'][$posicao] > $tamanhoMaximo)                    throw new Exception("O tamanho maximo de arquivo permitido é " . (($tamanhoMaximo / 1048576 * 100000) / 100000) . "MB");            }            //Inicia Transação            $con->startTransaction();            //Inicia gravação em disco e banco            foreach ($_POST[$campoImagem . 'IdDaTela'] as $posicao) {                if (empty($_FILES[$campoImagem]['name'][$posicao]))                    continue;                //Extensão                $extensao = strtolower($this->extenssaoArquivo($_FILES[$campoImagem]['name'][$posicao]));                //Definindo o nome do arquivo                if ($nomeFixo) {                    $nomeArquivo = $nomeFixo . "." . $extensao;                } else if ($prefixo or $sufixo) {                    $nomeArquivo = $prefixo . $posicao . $sufixo . "." . $extensao;                } else {                    $nomeArquivo = $_FILES[$campoImagem]['name'][$posicao];                }                $principal = ($_POST[$campoImagem . "Principal"] == $posicao and $habilitarPrincipal == true) ? 'S' : 'N';                //Grava na Tabela                $con->executar("INSERT INTO " . $tabela . " (ArquivoCod, CodigoReferencia, Nome, Hash, Extensao, Downloads, DataCriacao, Principal) VALUES (NULL, $codigoReferencia,'$nomeArquivo','','$extensao',0,now(),'$principal')");                $uID = $con->ultimoInsertId();                //Definindo Hash                $hash = crypt($nomeArquivo, mt_rand()) . crypt($uID, mt_rand()) . $uID;                //Remove barras do hash se existir                $hash = str_replace("/", "9", $hash);                $hash = str_replace("\\", "8", $hash);                //Atualiza Código Hash                $con->executar("UPDATE " . $tabela . " SET Hash = '$hash' WHERE ArquivoCod = $uID");                //Setando Destino                $destinoCompleto = $diretorioDestino . $hash;                if ($tratarComoUpper == "IMAGEM") {                    //Qualidade                    if ($qualidadeImagem) {                        if (in_array($qualidadeImagem, range(1, 100)))                            $this->setQualidade($qualidadeImagem);                    }                    //Grava o arquivo no diretorio                    $this->trataImagem($campoImagem, $destinoCompleto, $alturaMaxima, $larguraMaxima, '', $posicao);                    //Grava TB                    if ($diretorioDestinoTB) {                        $destinoCompletoTB = $diretorioDestinoTB . $hash;                        $this->trataImagem($campoImagem, $destinoCompletoTB, $alturaMaximaTB, $larguraMaximaTB, '', $posicao);                    }                } else if ($tratarComoUpper == "ARQUIVO") {                    $this->upload($campoImagem, $destinoCompleto, '', $posicao);                } else {                    throw new Exception("Tipo de Tratamento Invalido, use Arquivo ou Imagem.");                }            }            //Finaliza Transação            $con->stopTransaction();        }        //Remove Arquivos        if ($operacao == "Alt" and ! empty($arquivosARemover)) {            foreach ($arquivosARemover as $codigoARemover) {                $this->removerArquivos($cFG, $codigoReferencia, $codigoARemover);            }        }    }    public function removerArquivos($cFG, $codigoReferencia, $arquivoCod = null)    {        //Inicia Conexão        $con = Conexao::conectar();        $sqlWhere = empty($arquivoCod) ? "CodigoReferencia = $codigoReferencia" : "CodigoReferencia = $codigoReferencia AND ArquivoCod = $arquivoCod";        $rS = $con->executar("SELECT ArquivoCod, Hash FROM " . $cFG['Tabela'] . " WHERE " . $sqlWhere);        $nL = $con->nLinhas($rS);        if ($nL < 1)            return;        //Inicia Transação        $con->startTransaction();        while ($dados = $rS->fetch_array()) {            //Remove do banco            $con->executar("DELETE FROM " . $cFG['Tabela'] . " WHERE CodigoReferencia = $codigoReferencia AND ArquivoCod = " . $dados['ArquivoCod']);            //Diretorios            $diretorioDestino = $cFG['DiretorioDestino'];            $diretorioDestinoTB = $cFG['DiretorioDestinoTB'];            try {                //Tenta Remover do servidor                $this->removeArquivo($diretorioDestino . $dados['Hash']);                if ($diretorioDestinoTB) {                    $this->removeArquivo($diretorioDestinoTB . $dados['Hash']);                }            } catch (\Exception $e) {                //não faz nada.            }        }        //Finaliza Transação        $con->stopTransaction();    }    public function visualizarArquivos($tabela, $codigoReferencia, $diretorioDestino, $diretorioDestinoTB = "")    {        $con = Conexao::conectar();        $rS = $con->executar("SELECT ArquivoCod, CodigoReferencia, Nome, Extensao, Principal FROM " . $tabela . " WHERE CodigoReferencia = $codigoReferencia");        $nR = $con->nLinhas($rS);        if ($nR > 0) {            $htmlArquivos.= '<div class="arquivos_titulo">Arquivos:</div>';            while ($dados = $rS->fetch_array()) {                $htmlArquivos.= '<div class="upload_imagem">';                $caminhoTB = (empty($diretorioDestinoTB)) ? urlencode($diretorioDestino) : urlencode($diretorioDestinoTB);                $caminho = urlencode($diretorioDestino);                $mostraArquivo = '<a href="' . $_SESSION['UrlFMBase'] . 'arquivo_download.class.php?Caminho=' . $caminho . '&TB=' . $tabela . '&ArquivoCod=' . $dados['ArquivoCod'] . '&Modo=Download" target="_blank"><img src="' . $_SESSION['UrlFMBase'] . 'arquivo_download.class.php?Caminho=' . $caminhoTB . '&TB=' . $tabela . '&ArquivoCod=' . $dados['ArquivoCod'] . '&Modo=Ver" alt="' . $dados['Nome'] . '" border="0" /></a>';                //$mostraArquivo = '<a href="'.$_SESSION['UrlFMBase'].'arquivo_download.class.php?Caminho='.$caminho.'&TB='.$tabela.'&ArquivoCod='.$dados['ArquivoCod'].'&Modo=Download" target="_blank"><img src="'.$_SESSION['UrlBase'].'arquivos/produtos/2/tb/11qTsnXw452ms12w1KVPry0Rcg10" alt="'.$dados['Nome'].'" border="0" /></a>';                $htmlArquivos .= $mostraArquivo;                $htmlArquivos.= '</div>';            }            $htmlArquivos.= '<div style="clear:both;">&nbsp;</div>';        }        return $htmlArquivos;    }}
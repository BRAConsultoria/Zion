<?phpnamespace Zion\Arquivo;class ManipulaDiretorio{    /**     * 	Retorna verdadeiro caso o arquivo exista e falso caso não     * 	@param Local String - Diretãrio para criaãão do arquivo     * 	@return Boolean     */    public function arquivoExiste($local)    {        return(\file_exists($local)) ? true : false;    }        public function eDiretorio($dir)    {        return \is_dir($dir) ? true : false;    }    public function permiteEscrita($arquivo)    {        return \is_writable(dirname($arquivo)) ? true : false;    }        /**     * 	Cria um Diretório     * 	@param Dir String Caminho do novo diretãrio     * 	@param Permissao String Permissão para diretãrios em Linux     * 	@return Bool     */    public function criaDiretorio($dir, $permissao)    {        if($this->eDiretorio($dir)){            return true;        }        if (@\mkdir($dir, $permissao)) {            return true;        }        else{            throw new \Exception('Não foi possível criar o diretório!');        }    }    public function apagaArquivos($diretorio, $arrayTipos)    {        if (!$this->eDiretorio($diretorio)) {            throw new \Exception("O diretorio informado não é válido!!");        }        $abrir = \opendir($diretorio);        if (!$abrir) {            throw new \Exception("Não foi possivel abrir o diretorio!");        }        $tipos = \array_map("strtolower", $arrayTipos);        while ($arquivo = \readdir($abrir)) {            if ($arquivo <> "." and $arquivo <> "..") {                $arq = \strtolower($arquivo);                $vetExt = \explode(".", $arq);                $ext = $vetExt[\count($vetExt) - 1];                if (\in_array($ext, $tipos)) {                    if (\is_file($diretorio . $arquivo)) {                        $this->removeArquivo($diretorio . $arquivo);                    }                }            }        }        closedir($abrir);    }    public function chmodRecursivo($diretorio, $permissao = 0777)    {        if (!$this->eDiretorio($diretorio)) {            throw new \Exception("O diretorio informado não é válido!!");        }        $aux = strrev($diretorio);        if ($aux[0] != "/") {            $diretorio.= "/";        }        $chmod = \chmod($diretorio, $permissao);        if (!$chmod) {            throw new \Exception("Não foi possivel atribuir as permissões!");        }        $result = \scandir($diretorio);        if (!$result) {            throw new \Exception("Não foi possível ler o diretório!");        }        foreach ($result as $arquivo) {            $novoDiretorio = $diretorio . $arquivo;            if ($arquivo !== "." and $arquivo !== "..") {                if (\is_dir($novoDiretorio)) {                    $this->chmodRecursivo($novoDiretorio . "/", $permissao);                } else {                    \chmod($novoDiretorio, $permissao);                }            }        }    }    public function listaArquivos($diretorio, $arrayTipos = [])    {        $abrir = \opendir($diretorio);        if (!$abrir) {            throw new \Exception("Não foi possivel abrir o diretorio!");        }        if ($arrayTipos) {            $tipos = \array_map("strtolower", $arrayTipos);        }        $arrayArq = [];        while ($arquivo = \readdir($abrir)) {            if ($arquivo <> "." and $arquivo <> "..") {                $arq = \strtolower($arquivo);                $vetExt = \explode(".", $arq);                $ext = $vetExt[\count($vetExt) - 1];                if ($arrayTipos) {                    if (\in_array($ext, $tipos)) {                        $arrayArq[] = $arquivo;                    }                } else {                    $arrayArq[] = $arquivo;                }            }        }        return $arrayArq;    }    public function removeDiretorioCompleto($diretorio)    {        if (\is_dir($diretorio)) {            $aux = strrev($diretorio);            if ($aux[0] != "/") {                $diretorio.= "/";            }            $result = \scandir($diretorio);            if (!$result) {                throw new \Exception("Não foi possível ler o diretório!");            }            foreach ($result as $arquivo) {                $novoDiretorio = $diretorio . $arquivo;                if ($arquivo !== "." and $arquivo !== "..") {                    if (\is_file($novoDiretorio)) {                        $this->removeArquivo($novoDiretorio);                    } elseif (\is_dir($novoDiretorio)) {                        $this->removeDiretorioCompleto($novoDiretorio . "/");                    }                }            }            $this->removeDiretorio($diretorio);        }    }    public function removeArquivo($arquivo)    {        if (!@\unlink($arquivo)) {            throw new \Exception("Não foi possivel remover o arquivo:" . $arquivo);        }    }    public function removeDiretorio($dir)    {        if (!\rmdir($dir)) {            throw new \Exception("Não foi possivel remover o diretorio:" . $dir);        }    }}
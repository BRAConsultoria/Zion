<?/***	@copyright DEMP - Soluãães em Tecnologia da Informaãão Ltda*	@author Pablo Vanni - pablovanni@gmail.com*	@since  13/02/2006*	<br>ãltima Atualizaãão: 15/05/2006<br>*	Autualizada Por: Pablo Vanni - pablovanni@gmail.com<br>*	@name Funãães de alocaãão e redimencionamento de imagens* 	@version 1.0* 	@package Framework*/class Arquivos{	/**	*	Atributos da Classe	*/	private $Qualidade;     //Qualidade para gerar imagens	private $TamMax; //Tamanho maximo de um arquivo	/**	*	Construtor	*/	public function Arquivos()	{		$this->setQualidade(75);		$this->setTamMax( 9000000);	}	/**	*	Seta a Qualidades da imagem	*/	public function setQualidade($Valor)	{		$this->Qualidade = $Valor;	}	/**	*	Recupera a Qualidades da imagem	*/	public function getQualidade()	{		return $this->Qualidade;	}	/**	*	Seta o Tamanho mãximo das imagens	*/	public function setTamMax($Valor)	{		$this->TamMax = $Valor;	}	/**	*	Recupera o Tamanho mãximo das imagens	*/	public function getTamMax()	{		return $this->TamMax;	}	/**	*	Retorna verdadeiro caso o arquivo exista e falso caso não	*	@param Local String - Diretãrio para criaãão do arquivo	*	@return Boolean	*/	public function integridade($Local)	{		return(!file_exists($Local)) ? false : true;	}	/**	*	Cria um Diretãrio	*	@param Dir String Caminho do novo diretãrio	*	@param Permissao String Permissão para diretãrios em Linux	*	@return Void	*/	public function criaDiretorio($Dir, $Permissao)	{		//Diretorio jã existe		if(is_dir($Dir)) return;		//Cria Diretorio		if(!@mkdir($Dir, $Permissao))		{			throw new Exception("Não Foi Possivel Criar o Diretório!");		}	}	/**	*	Retorna verdadeiro caso a funãão existam e falso caso não	*	@return Boolean	*/	public function vericaFuncoes()	{		if(!function_exists('getimagesize'))         return false;		if(!function_exists('imagecreatefromjpeg'))  return false;		if(!function_exists('imagecreatetruecolor')) return false;		if(!function_exists('imagecolorallocate'))   return false;		if(!function_exists('imagecopyresampled'))   return false;		if(!function_exists('imagesy'))              return false;		if(!function_exists('imagesx'))   		 	 return false;		if(!function_exists('imagejpeg'))   		 return false;		return true;	}	/**	*	Retorna um array com a altura e a largura da imagem	*	@param Imagem String - Diretãrio para criaãão do arquivo	*	@return  Array()	*/	public function tamanhoImagem($Imagem)	{		$ImgSize = @getimagesize($Imagem);		return array("L"=> $ImgSize[0], "A"=> $ImgSize[1]);	}	/**	*	Verifica se o peso do arquivo não foi ultrapassado	*	@param Dir String - Diretãrio do arquivo	*	@return Boolean	*/	public function pesoArquivo($Dir)	{		return(filesize($Dir) <= $this->TamMax) ? true : false;	}	/**	*	Recupera a extenssão de um arquivo atravez da String de seu nome	*	@param Arquivo String - String de Nomenclatura	*	@return Boolean	*/	public function extenssaoArquivo($Arquivo)	{		$VetExt = explode(".",$Arquivo);		return $VetExt[count($VetExt) - 1];	}	/**	*	Retorna um array com altura e largura proporcionais da imagem	*	@param Tamanho Inteiro - Tamanho mãximo da imagem	*	@param Por String - A -> Redimeciona pela altura, L pela largura	*	@param Originais Array() - Vetor contendo as dimenãães originais	*	@return Array()	*/	public function proporcoes($Tamanho, $Por, $Originais)	{		switch($Por)		{			case "A":				$Calcula = ($Tamanho * 100) / $Originais['A'];				$Largura = ($Originais['L'] * $Calcula) / 100;				return array("L"=> $Largura, "A"=> $Tamanho);			break;			case "L":				$Calcula = ($Tamanho * 100) / $Originais['L'];				$Altura  = ($Originais['A'] * $Calcula) / 100;				return array("L"=> $Tamanho, "A"=> $Altura);			break;		}	}	/**	*	Verifica se o tipo de imagem ã realmente o tipo especificado	*	@param Imagem String - Imagem a ser comparada	*	@param Tipo String - Tipo da imagem a ser comparada	*	@return Booleano	*/	public function tipoImagem($ImagemTipo, $Tipo)	{		switch($Tipo)		{			case "JPG":			return(($ImagemTipo == "image/jpeg") or ($ImagemTipo == "image/pjpeg")) ? true : false;			break;			default: return false;		}	}	/**	*	Verifica se o tipo de Arquivo se ã um tipo Vãlido	*	@param ImagemTipo Array - Array a ser comparado	*	@param Tipo Array - Tipo da arquivo a ser comparado	*	@return Booleano	*/	public function tipoArquivo($ArquivoTipo, $Tipo)	{		return(@in_array($ArquivoTipo, $Tipo)) ? true : false;	}	/**	*	Armazena e redimenciona uma imagem no formato JPG	*	@param Destino String - Local onde a foto serã tratada e guardada	*	@param Arquivo String - Nome do arquivo a ser criado	*	@param Altura Inteiro - Fixa a altura da nova imagem	*	@param Largura Inteiro - Fixa a largura da nova imagem	* 	@param Manter String - Indica se o arquivo deve ser mantido ou não "ok"	*	@return String	*/	public function trataImagem($Arquivo, $Destino, $Altura, $Largura, $Manter = '', $Posicao = false)	{		//Arquivo Atual deve ser mantido		if($Manter == "Ok") return NULL;		//Dados do File		$NomeTemporario = ($Posicao === false) ? $_FILES[$Arquivo]['tmp_name'] : $_FILES[$Arquivo]['tmp_name'][$Posicao];		$NomeArquivo    = ($Posicao === false) ? $_FILES[$Arquivo]['name']     : $_FILES[$Arquivo]['name'][$Posicao];		$TipoArquivo    = ($Posicao === false) ? $_FILES[$Arquivo]['type']     : $_FILES[$Arquivo]['type'][$Posicao];		//Verifica a integridade do arquivo		if(!$this->integridade($NomeTemporario)) throw new Exception("Você deve selecionar pelo menos um arquivo!");		//Recupera a Extensao do Arquivo		$Extensao = strtolower($this->extenssaoArquivo($NomeArquivo));		//Verifica a integridade da imagem		//if(!$this->tipoImagem($TipoArquivo, "JPG")) throw new Exception("Formato da imagem não ã vãlido");		//Verifica a existencia das funãoes		if(!$this->vericaFuncoes()) throw new Exception("Funçoes para manipulação de imagens não encotradas");		//Cria um vetor com as proporãães da imagem		$TArquivo = $this->tamanhoImagem($NomeTemporario);		//Calcula as proporãães		if(empty($Altura) and empty($Largura)) $Proporcao = array("L"=> $TArquivo['L'], "A"=> $TArquivo['A']);		elseif(!empty($Altura) and !empty($Largura)) $Proporcao = array("L"=> $Largura, "A"=> $Altura);		elseif (!empty($Altura)) $Proporcao = $this->proporcoes($Altura, "A", $TArquivo);		else   $Proporcao = $this->proporcoes($Largura, "L", $TArquivo);		//Executando a criaãão da nova imagem		if($Extensao == 'jpg' or $Extensao == 'jpeg')		{			$Origem = @imagecreatefromjpeg($NomeTemporario);		}		elseif ($Extensao == 'gif')		{			$Origem = @imagecreatefromgif($NomeTemporario);			$Img    = @imagecreatetruecolor($Proporcao['L'], $Proporcao['A']);		}		elseif ($Extensao == 'png')		{			$Origem = @imagecreatefrompng($NomeTemporario);		}		else		{			throw new Exception("Extensao inválida!");		}		$Img = @imagecreatetruecolor($Proporcao['L'], $Proporcao['A']);		if(@imagecopyresampled($Img, $Origem, 0, 0, 0, 0, $Proporcao['L'], $Proporcao['A'], @imagesx($Origem), @imagesy($Origem)))		{			if($Extensao == 'jpg' or $Extensao == 'jpeg')			{				if(!(@imagejpeg($Img, $Destino, $this->Qualidade)))				{					throw new Exception("Não foi possivel criar o arquivo $Extensao");				}			}			elseif ($Extensao == 'gif')			{				if(!(@imagegif($Img, $Destino)))				{					throw new Exception("Não foi possivel criar o arquivo $Extensao");				}			}			elseif ($Extensao == 'png')			{				if(!(@imagepng($Img, $Destino)))				{					throw new Exception("Não foi possivel criar o arquivo $Extensao");				}			}		}		else		{			throw new Exception("Não foi possivel gerar o arquivo");		}	}	/**	*	Faz o upload de um arquivo	*	@param Arquivo String - Endereão do arquivo a ser UPADO	*	@param Destino String - Destino para onde o arquivo deve ser UPADO	*	@param Manter String - Se valor de "manter" = "ok" não faz UPLOAD	*	@param Tipos  Array - Tipos de arquivos que podem ser upados	*	@return String	*/	public function upload($Arquivo, $Destino, $Manter, $Tipos, $Posicao = false)	{		//Dados do File		$NomeTemporario = ($Posicao === false) ? $_FILES[$Arquivo]['tmp_name'] : $_FILES[$Arquivo]['tmp_name'][$Posicao];		$TipoArquivo    = ($Posicao === false) ? $_FILES[$Arquivo]['type'] : $_FILES[$Arquivo]['type'][$Posicao];		if($Manter == "Ok") return NULL;		if(!$this->integridade($NomeTemporario))            throw new Exception("Você deve selecionar pelo menos um arquivo!");		//if(!$this->tipoArquivo($TipoArquivo, $Tipos))     throw new Exception("O tipo de arquivo ã invãlido");		if(!$this->pesoArquivo($NomeTemporario))            throw new Exception("Este arquivo é muito grande!");		if(!@move_uploaded_file($NomeTemporario, $Destino)) throw new Exception("Não foi possivel fazer o upload!");	}	public function apagaArquivos($Diretorio, $ArrayTipos)	{		$Abrir = @opendir($Diretorio);		$Tipos = @array_map("strtolower", $ArrayTipos);		while ($Arquivo = @readdir($Abrir))		{			if ($Arquivo <> "." and  $Arquivo <> "..")			{				$Arq     = strtolower($Arquivo);				$VetExt  = explode(".",$Arq);				$Ext     = $VetExt[count($VetExt) - 1];				if (in_array($Ext, $Tipos))				{					if(is_file($Diretorio.$Arquivo)) @unlink($Diretorio.$Arquivo);				}			}		}		@closedir($Abrir);	}	public function apagaDiretorioCompleto($Diretorio)	{            if (is_dir($Diretorio))            {                $Aux = strrev($Diretorio);                if($Aux[0] != "/")                {                   $Diretorio.= "/";                }                $Resut = scandir($Diretorio);                foreach($Resut as $Arquivo)                {                    $NovoDiretorio = $Diretorio.$Arquivo;                    if($Arquivo !== "." and  $Arquivo !== "..")                    {                        if(is_file($NovoDiretorio))                        {                            @unlink($NovoDiretorio);                        }elseif(is_dir($NovoDiretorio))                        {                            $this->apagaDiretorioCompleto($NovoDiretorio."/");                        }                    }                }                @rmdir($Diretorio);            }	}        public function chmodRecursivo($Diretorio, $Permissao = 0777)	{            if (is_dir($Diretorio))            {                $Aux = strrev($Diretorio);                if($Aux[0] != "/")                {                   $Diretorio.= "/";                }                @chmod($Diretorio, $Permissao);                $Resut = scandir($Diretorio);                foreach($Resut as $Arquivo)                {                    $NovoDiretorio = $Diretorio.$Arquivo;                    if($Arquivo !== "." and  $Arquivo !== "..")                    {                        if(is_dir($NovoDiretorio))                        {                            $this->chmodRecursivo($NovoDiretorio."/", $Permissao);                        }else{                            @chmod($NovoDiretorio, $Permissao);                        }                    }                }            }	}	public function listaArquivos($Diretorio, $ArrayTipos)	{		$Abrir = @opendir($Diretorio);		$Tipos = @array_map("strtolower", $ArrayTipos);		$ArrayArq = array();		while ($Arquivo = @readdir($Abrir))		{			if ($Arquivo <> "." and  $Arquivo <> "..")			{				$Arq     = strtolower($Arquivo);				$VetExt  = explode(".",$Arq);				$Ext     = $VetExt[count($VetExt) - 1];				if (in_array($Ext, $Tipos))				{					$ArrayArq[] = $Arquivo;				}			}		}	}	public function removeArquivo($Arquivo)	{		return(@unlink($Arquivo)) ? true : false;	}	public function removeDiretorio($Dir)	{		return(@rmdir($Dir)) ? true : false;	}	/**	 * Move arquivos do componente de upload para alguma pasta	 * Passe o Id quando for Alteracao, ele buscara o campo Upload concatenado com Id	 * AlteraNome: passe o array necessãrio para renomeia o arquivo na pasta como o (ultimoId + 1)	 *	 * @param object  $Objeto    -> passe a classe que contem a funcao que cadastra a imagem no banco de dados	 * @param string  $Funcao    -> funcao a ser chamada para inserir no banco	 * 							 -> ela vai receber 1 parametro que ã o nome do arquivo. Ex: 'insereDados'	 * @param string $CampoUpload -> Nome do Campo de Upload	 * @param integer $Id		 -> Id da Tabela que serã usado para buscar o $_FILES[$NomeCampo.$Id	 * '							ex: no Cadastrar passe (vazio) '', no alterar o Id	 * @param string  $Destino   -> caminho para a pasta base aonde os arquivos serao enviados.	 * 								Ex: ['Dirbase']./noticia	 * @param string  $NomePasta -> se quiser colocar a imagem em uma subpasta de $Destino, passe o nome e ela sera gerenciada automaticamente	 * 								Ex: $Id, $Categoria..	 * @param Array   $AlterarNome array(0 => 'Tabela', 1 => 'TabelaCod')	 * 							 -> se kiser que o arquivo a ser salvo tenha o como nome o Id de um campo, passe a tabela e o campo a ser usado	 * 							 -> senao o arquivo serã movido para a pasta sem ser renomeado	 */	public function moveArquivos($Objeto = null, $Funcao = null, $CampoUpload, $Id = '', $Destino, $NomePasta = '', $AlterarNome = null)	{		$Con = Conexao::conectar();		$CampoUpload .= $Id;		//Cria pasta do arquivo		if(!empty($NomePasta)) {			if(!@is_dir($Destino.$NomePasta."/"))			{				if(!@mkdir($Destino.$NomePasta, 0777)){					throw new Exception("A pasta não pode ser gerada.");				}			}		}		//Move Arquivo		if(isset($_FILES[$CampoUpload]['tmp_name'][0]))		{			foreach ($_FILES[$CampoUpload]['name'] as $Key => $Val)			{				$NomeTemp = $_FILES[$CampoUpload]['tmp_name'][$Key];				if(is_object($Objeto)){					$Objeto->$Funcao($Val);				}				//Recupera o ultimoId e envia para ser o nome do arquivo				if(is_array($AlterarNome))				{					$NomeArquivo = $Con->ultimoId($AlterarNome[0], $AlterarNome[1]);					$NomeArquivo = (!is_numeric($NomeArquivo) ? 0 : $NomeArquivo);				}				if(@move_uploaded_file($NomeTemp, "".$Destino.$NomePasta."/".$NomeArquivo.".".$this->extenssaoArquivo($Val).""))				{				}				else				{					throw new Exception("O arquivo não pode ser movido.");				}			}		}	}}?>
<? /***	@copyright DEMP - Soluãães em Tecnologia da Informaãão Ltda*	@author Pablo Vanni - pablovanni@gmail.com*	@since  13/02/2006*	<br>ãltima Atualizaãão: 15/05/2006<br>*	<br>ãltima Atualizaãão: 20/01/2011<br>*	Autualizada Por: Pablo Vanni - pablovanni@gmail.com<br>*	@name Funãães de alocaãão e redimencionamento de imagens* 	@version 1.0* 	@package Framework*/class Arquivo{			/**	*	Retorna verdadeiro caso o arquivo exista e falso caso não	*	@param Local String - Diretãrio para criaãão do arquivo	*	@return Boolean	*/	public function integridade($Local)	{		return(file_exists($Local)) ? true : false;	}			/**	*	Cria um Diretório	*	@param Dir String Caminho do novo diretãrio	*	@param Permissao String Permissão para diretãrios em Linux	*	@return Void	*/	public function criaDiretorio($Dir, $Permissao)	{		//Diretorio já existe		if(is_dir($Dir)) return;				//Cria Diretorio		if(!@mkdir($Dir, $Permissao))		{			throw new Exception("Não Foi Possivel Criar o Diretório!");		}	}				/**	*	Recupera a extenssão de um arquivo atravez da String de seu nome	*	@param Arquivo String - String de Nomenclatura	*	@return Boolean	*/	public function extenssaoArquivo($Arquivo)	{		$VetExt = explode(".",$Arquivo);					return $VetExt[count($VetExt) - 1];	}			/**	*	Faz o upload de um arquivo	*	@param Arquivo String - Endereão do arquivo a ser UPADO	*	@param Destino String - Destino para onde o arquivo deve ser UPADO	*	@param Manter String - Se valor de "manter" = "ok" não faz UPLOAD	*	@param Tipos  Array - Tipos de arquivos que podem ser upados	*	@return String	*/	public function upload($Arquivo, $Destino, $Manter, $Posicao = false)	{		//Arquivo Atual deve ser mantido		if($Manter == "Ok") return;        //Dados do File		$NomeTemporario = ($Posicao === false) ? $_FILES[$Arquivo]['tmp_name'] : $_FILES[$Arquivo]['tmp_name'][$Posicao];        $PostMax = ini_get("post_max_size");        $UpMax   = ini_get("upload_max_filesize");        //Menor Tamanho de Configuração        $TMax = $PostMax > $UpMax ? $UpMax : $PostMax;		//Verifica a integridade do arquivo		if(!$this->integridade($NomeTemporario)) throw new Exception("O Arquivo não foi carregado, certifique-se que o tamanho do arquivo não tenha ultrapassado ".$TMax." pois, este tamanho é o maximo permitido pelo seu servidor.");        //Verifica se a pasta permite gravação        if(!is_writable(dirname($Destino))) throw new Exception("A pasta onde você esta tentando gravar o arquivo não tem permissão de escrita, contate o administrador do sistema.");        //Verifica se o arquivo ja existe        if($this->integridade($Destino))        {            //Se sim verifica se tem permissão para substitui-lo            if(!is_writable($Destino)) throw new Exception("Este arquivo já existe e você não tem permissão para substituí-lo.");        }						//Upload        if(!move_uploaded_file($NomeTemporario, $Destino)) throw new Exception("Não foi possivel fazer o upload!".$Destino);	}		public function apagaArquivos($Diretorio, $ArrayTipos)	{				if(!is_dir($Diretorio)) throw new Exception("O diretorio informado não é válido!!");                $Abrir = @opendir($Diretorio);        if(!$Abrir) throw new Exception("Não foi possivel abrir o diretorio!");				$Tipos = array_map("strtolower", $ArrayTipos);		while ($Arquivo = readdir($Abrir)) 		{			if ($Arquivo <> "." and  $Arquivo <> "..") 			{				$Arq     = strtolower($Arquivo);				$VetExt  = explode(".",$Arq);				$Ext     = $VetExt[count($VetExt) - 1];				if (in_array($Ext, $Tipos)) 				{					if(is_file($Diretorio.$Arquivo)) $this->removeArquivo($Diretorio.$Arquivo);				}			}		}				@closedir($Abrir);	}	    public function chmodRecursivo($Diretorio, $Permissao = 0777)	{        if(!is_dir($Diretorio)) throw new Exception("O diretorio informado não é válido!!");                $Aux = strrev($Diretorio);        if($Aux[0] != "/")        {           $Diretorio.= "/";        }        $Chmod = chmod($Diretorio, $Permissao);                if(!$Chmod) throw new Exception("Não foi possivel atribuir as permissões!");        $Resut = @scandir($Diretorio);        if(!$Result) throw new Exception("Não foi possível ler o diretório!");                foreach($Resut as $Arquivo)        {            $NovoDiretorio = $Diretorio.$Arquivo;            if($Arquivo !== "." and  $Arquivo !== "..")            {                if(is_dir($NovoDiretorio))                {                    $this->chmodRecursivo($NovoDiretorio."/", $Permissao);                }                else                {                    chmod($NovoDiretorio, $Permissao);                }            }        }	}			public function listaArquivos($Diretorio, $ArrayTipos = array())	{				$Abrir = @opendir($Diretorio);        if(!$Abrir) throw new Exception("Não foi possivel abrir o diretorio!");				if($ArrayTipos)        {            $Tipos = array_map("strtolower", $ArrayTipos);        }				$ArrayArq = array();				while ($Arquivo = readdir($Abrir)) 		{			if ($Arquivo <> "." and  $Arquivo <> "..") 			{				$Arq     = strtolower($Arquivo);				$VetExt  = explode(".",$Arq);				$Ext     = $VetExt[count($VetExt) - 1];				if($ArrayTipos)                {                    if (in_array($Ext, $Tipos))                    {                        $ArrayArq[] = $Arquivo;                    }                }                else                {                    $ArrayArq[] = $Arquivo;                }			}		}        return $ArrayArq;	}    public function removeDiretorioCompleto($Diretorio)	{        if(is_dir($Diretorio))        {            $Aux = strrev($Diretorio);            if($Aux[0] != "/")            {               $Diretorio.= "/";            }            $Resut = @scandir($Diretorio);                        if(!$Result) throw new Exception("Não foi possível ler o diretório!");            foreach($Resut as $Arquivo)            {                $NovoDiretorio = $Diretorio.$Arquivo;                if($Arquivo !== "." and  $Arquivo !== "..")                {                    if(is_file($NovoDiretorio))                    {                        $this->removeArquivo($NovoDiretorio);                    }                    elseif(is_dir($NovoDiretorio))                    {                        $this->removeDiretorioCompleto($NovoDiretorio."/");                    }                }            }            $this->removeDiretorio($Diretorio);        }	}	public function removeArquivo($Arquivo)	{		if(!@unlink($Arquivo)) throw new Exception("Não foi possivel remover o arquivo:".$Arquivo);	}			public function removeDiretorio($Dir)	{		if(!@rmdir($Dir)) throw new Exception("Não foi possivel remover o diretorio:".$Arquivo);	}	}?>
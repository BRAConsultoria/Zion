<?php/** * @author Pablo Vanni - pablovanni@gmail.com * @since 01/06/2006 * Última Atualização: 28/05/2007 * Autualizada Por: Pablo Vanni - pablovanni@gmail.com * @name Metodos de interação com a base de dados * @version 2.0 * @package Framework */namespace Zion\Menu;abstract class MenuSql{    protected $con;    /**     * MenuSql::__construct()     *      * @return     */    public function __construct()    {        $this->con = \Zion\Banco\Conexao::conectar();    }    /**     * 	Retorna os Grupos disponíveis para determinado usuário     * 	Utilizado para gerar tamanho do menu     * 	@return Quantidade de Grupos     */    protected function gruposDiponiveisUsuario($usuarioCod)    {        $sql = "SELECT a.GrupoModuloCod                 FROM _grupo_modulo a INNER JOIN  _modulo b ON (a.ModuloCod = b.ModuloCod)                     INNER JOIN _acao_modulo c ON (b.ModuloCod = c.ModuloCod)                      INNER JOIN _permissao d ON (c.AcaoModuloCod = d.AcaoModuloCod)                WHERE d.UsuarioCod = $usuarioCod LIMIT 1";        return $this->con->execNLinhas($sql);    }    /**     * 	Retorna os grupos disponiveis no sistema     * 	@return ResultSet     */    protected function gruposDiponiveis()    {        $sql = "SELECT 	 GrupoModuloCod, GrupoModuloDesc, GrupoModuloPacote, GrupoModuloClass				FROM	 _grupo_modulo  				ORDER BY GrupoModuloPosicao ASC";        return $this->con->executar($sql);    }    /**     * MenuSql::gruposDiponiveisSql()     *      * @return     */    protected function gruposDiponiveisSql()    {        $sql = "SELECT 	 GrupoModuloCod, GrupoModuloDesc, GrupoModuloPacote, GrupoModuloClass				FROM	 _grupo_modulo				ORDER BY GrupoModuloPosicao ASC";        return $sql;    }    /**     * MenuSql::modulosDiponiveisSql()     *      * @return     */    protected function modulosDiponiveisSql()    {        $sql = "SELECT 	 ModuloCod, GrupoModuloCod, ModuloCodReferente, ModuloNome,                          ModuloDesc, ModuloNomeMenu, ModuloBase, ModuloVisivelMenu, ModuloClass				FROM	 _modulo                WHERE    1                 ORDER BY ModuloPosicao ASC";        return $sql;    }    /**     * MenuSql::usuarioPermissaoModuloSql()     *      * @param mixed $usuarioCod     * @return     */    protected function usuarioPermissaoModuloSql($usuarioCod)    {        $sql = "SELECT DISTINCT(ModuloCod) as ModuloCod                FROM   _acao_modulo a INNER JOIN _permissao b ON (a.AcaoModuloCod = b.AcaoModuloCod)                WHERE  b.TipoPermissaoCod IS NOT NULL                AND    b.UsuarioCod = $usuarioCod";        return $sql;    }    /**     * MenuSql::dadosModulo()     *      * @param mixed $moduloCod     * @param bool $visivel     * @return     */    protected function dadosModulo($moduloCod, $visivel = true)    {        $visibilidade = $visivel == false ? "" : " AND VisivelMenu = 'S' ";        $sql = "SELECT a.ModuloCod, a.GrupoCod, a.ModuloNome,                       a.ModuloDesc, a.NomeMenu, a.ModuloBase,                       b.Pacote                FROM   _modulos a, _grupomodulo b                WHERE  a.GrupoCod = b.GrupoCod                       $visibilidade AND                       a.ModuloCod = $moduloCod";        return $this->con->execLinha($sql);    }    /**     * MenuSql::modulosReferentes()     * Retorna os grupos referentes     *      * @param mixed $referencia     * @param bool $visivel     * @return     */    protected function modulosReferentes($referencia, $visivel = true)    {        $visibilidade = $visivel == false ? "" : " AND VisivelMenu = 'S' ";        $sql = "SELECT 	 ModuloCod, NomeMenu				FROM	 _modulos 				WHERE 	 ModuloReferente = " . $referencia . "                                           $visibilidade				ORDER BY Posicao ASC";        return $this->con->executar($sql);    }    /**     * 	Retorna os m�dulos disponiveis no sistema para cada grupo     * 	@param GrupoCod String - C�digo do Grupo     * 	@param Mostrar String  - T -> Todos, V ->Visiveis no menu     * 	@return ResultSet     */    protected function modulosGrupoSemReferencia($grupoCod, $mostrar = "V")    {        $condicaoMostrar = ($mostrar == "V") ? " AND a.VisivelMenu = 'S' " : "";        $sql = "SELECT a.ModuloCod				FROM   _modulos a, _grupomodulo b 				WHERE  a.GrupoCod = b.GrupoCod             $condicaoMostrar					   AND a.grupocod= " . $grupoCod . "					   AND a.ModuloReferente = 0 				ORDER BY a.Posicao ASC";        return $this->con->executar($sql);    }    /**     * MenuSql::existeSubModulo()     *      * @param mixed $moduloCod     * @param string $mostrar     * @return     */    protected function existeSubModulo($moduloCod, $mostrar = "V")    {        $condicaoMostrar = ($mostrar == "V") ? " VisivelMenu = 'S' AND" : "";        $sql = "SELECT ModuloCod FROM _modulos WHERE $condicaoMostrar ModuloReferente = $moduloCod ";        return ($this->con->execNLinhas($sql) > 0) ? true : false;    }    /**     * 	Retorna o SQL para o n�mero de permiss�es ativas para um grupo inteiro     * 	@param GrupoCod String - C�digo do Grupo     * 	@return String     */    protected function sqlPermissaoGrupo($grupoCod)    {        $sql = "SELECT count(a.GrupoCod) Total				FROM   _grupomodulo a, _modulos b, 					   _opcoes_modulo c, _usuarios d,					   _tipo_permissao e   				WHERE  a.GrupoCod         = b.GrupoCod					   AND b.ModuloCod    = c.ModuloCod  					   AND e.UsuarioCod   = d.UsuarioCod 					   AND c.OpcoesModuloCod = e.OpcoesModuloCod 					   AND d.UsuarioCod   = " . $_SESSION['UsuarioCod'] . " 					   AND a.GrupoCod     = " . $grupoCod . "					   AND e.Permissao    = 'S'";        return $sql;    }    /**     * 	Retorna o n�mero de permiss�es ativas para um grupo inteiro     * 	@param GrupoCod String - C�digo do Grupo     * 	@return Inteiro     */    protected function permissaoGrupo($grupoCod)    {        $totalDiretos = $this->con->execRLinha($this->sqlPermissaoGrupo($grupoCod));        $totalGeral = $totalDiretos; // + $contRef;        return ((int) $totalGeral);    }    /**     * 	Retorna o n�mero Permiss�es ativas para um m�dulo especifico     * 	@param GrupoCod String - C�digo do Grupo     * 	@param ModuloCod String - C�digo do M�dulo     * 	@return Inteiro     */    protected function ocorrenciasModulo($grupoCod, $moduloCod)    {        //Verifica o numero de ocorrencias para este grupo        $sql = "SELECT count(a.GrupoCod) Total				FROM   _grupomodulo a, _modulos b, 					   _opcoes_modulo c, _usuarios d,					   _tipo_permissao e   				WHERE  a.GrupoCod         = b.GrupoCod					   AND b.ModuloCod    = c.ModuloCod  					   AND e.UsuarioCod   = d.UsuarioCod 					   AND c.OpcoesModuloCod = e.OpcoesModuloCod					   AND b.ModuloCod    = " . $moduloCod . " 					   AND d.UsuarioCod   = " . $_SESSION['UsuarioCod'] . " 					   AND a.GrupoCod     = " . $grupoCod . "					   AND e.Permissao    = 'S'";        $linhaTotal = $this->con->execRLinha($sql);        return $linhaTotal['Total'];    }    /**     * @abstract Retorna se existe algum submenu filho do modulo que o usuario tenha permissao     * @author Yuri Gauer Marques     */    protected function checaPermissaoMenuPai($moduloCod)    {        $sql = "SELECT a.ModuloCod Total FROM _modulos a, _opcoes_modulo b, _tipo_permissao c                WHERE a.ModuloReferente = " . $moduloCod . " AND                a.ModuloCod = b.ModuloCod AND                b.OpcoesModuloCod = c.OpcoesModuloCod AND                c.UsuarioCod = " . $_SESSION['UsuarioCod'] . "  AND                c.Permissao = 'S' LIMIT 1";        $ocorrencias = $this->con->executar($sql);        $NumOcorrencias = $this->con->nLinhas($ocorrencias);        return $NumOcorrencias;    }}
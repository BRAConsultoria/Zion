<?php/** * @author Pablo Vanni - pablovanni@gmail.com * @since 01/06/2006 * Última Atualização: 28/05/2007 * Última Atualização: 16/03/2010 * Última Atualização: 10/02/2011 Passou a Trabalhar com Vetores - Corrigidos Erros de Acesso - Muitooo Mais Rápida * Atualizada por: Pablo Vanni - pablovanni@gmail.com * Última Atualização: 08/10/2014 Passou a gerar toda a estrura do menu em uma matriz hierárquica de niveis infinitos. Muito mais abstrata. * Atualizada por: Feliphe, o Retaliador - feliphezion@gmail.com * @name Gera uma estrutura de menus para acesso aos módulos do sistema, considerando as permissões do usuário logado. * Última Atualização: 09/10/2014 Adequado o retorno json e outras paradas mainstream. Muito mais tocha! * Corrigida por: Pozzebon, the Black Horse - vpozzebon@gmail.com * @version 3.0 * @package Framework */namespace Zion\Menu;class Menu extends MenuSql{    private $urlBase;    private $arrayGrupo;    private $arrayModulo;    private $arrayPermissao;    private $gruposSelecionados;    private $modulosSemReferencia;    private $modulosComReferencia;    private $modulosReferentes;    private $arrayPacote;    public function __construct()    {        parent::__construct();        $this->urlBase = SIS_URL_BASE;        $this->arrayGrupo = array();        $this->arrayModulo = array();        $this->arrayPermissao = array();        $this->gruposSelecionados = array();        $this->modulosSemReferencia = array();        $this->modulosComReferencia = array();        $this->modulosReferentes = array();        $this->arrayPacote = array();    }    /**     * Menu::geraMenu()     * Monta um JSON com a estrutura de menus, de acordo com as permissões atribuídas ao usuário logado.     *      * @return string JSON com a estrura encontrada. Array ([1] => Array ([Grupo] => Grupo Maior [ModulosGrupo] => Modulos e Submodulos do grupo))     * @example Sempre que um array dentro de ModulosGrupo tiver um outro array na chave Subs, este será um subgrupo podendo ter módulos e outros subgrupos, recursivamente. False otherwise.     */    public function geraMenu()    {        if (!isset($_SESSION['UsuarioCod'])) {            return json_encode(array("sucesso" => false, "retorno" => "Usuário não autenticado."));        }        $usuarioCod = $_SESSION['UsuarioCod'];        $this->arrayGrupo = $this->con->paraArray(parent::gruposDiponiveisSql());        $this->arrayModulo = $this->con->paraArray(parent::modulosDiponiveisSql(), null, "ModuloCod");        $this->arrayPermissao = $this->con->paraArray(parent::usuarioPermissaoModuloSql($usuarioCod), "ModuloCod");        $this->processaDetalhes();        $json = array();        foreach ($this->arrayGrupo as $dadosGrupo) {            if (!in_array($dadosGrupo['GrupoModuloCod'], $this->gruposSelecionados)) {                continue;            }            $this->arrayPacote[$dadosGrupo['GrupoModuloCod']] = $dadosGrupo['GrupoModuloPacote'];            $grupoModuloCod = $dadosGrupo['GrupoModuloCod'];            $json[$grupoModuloCod]['Grupo'] = $dadosGrupo['GrupoModuloDesc']; //Inicia um grupo.            $json[$grupoModuloCod]['GrupoModuloClass'] = $dadosGrupo['GrupoModuloClass']; //Inicia um grupo.            $json[$grupoModuloCod]['ModulosGrupo'] = $this->geraModulos($dadosGrupo['GrupoModuloCod']); //Carrega os módulos e subgrupos do grupo recém-iniciado.        }        return json_encode(array('sucesso' => true, 'retorno' => $json));    }    /**     * Menu::processaDetalhes()     *      * @return     */    private function processaDetalhes()    {        $todosModulos = array();        foreach ($this->arrayModulo as $dadosModulo) {            $todosModulos[$dadosModulo['ModuloCod']] = $dadosModulo['ModuloCod'];        }        $this->processaPermissoes($todosModulos);        foreach ($this->arrayModulo as $dadosModulo) {            if (in_array($dadosModulo['ModuloCod'], $this->arrayPermissao)) {                $this->gruposSelecionados[$dadosModulo['GrupoModuloCod']] = $dadosModulo['GrupoModuloCod'];            }            if (empty($dadosModulo['ModuloCodReferente'])) {                $this->modulosSemReferencia[$dadosModulo['GrupoModuloCod']][$dadosModulo['ModuloCod']] = $dadosModulo['ModuloCod'];            } else {                $this->modulosComReferencia[$dadosModulo['ModuloCod']] = $dadosModulo['ModuloCodReferente'];                $this->modulosReferentes[$dadosModulo['ModuloCodReferente']][] = $dadosModulo['ModuloCod'];            }        }    }    /**     * Menu::processaPermissoes()     *      * @param mixed $todosModulos     * @return     */    private function processaPermissoes($todosModulos)    {        foreach ($todosModulos as $moduloCod) {            if (!empty($this->arrayModulo[$moduloCod]['ModuloCodReferente']) and in_array($moduloCod, $this->arrayPermissao)) {                $this->analisaPermissaoRecursivo($moduloCod);            }        }        $this->arrayPermissao = array_unique($this->arrayPermissao);    }    /**     * Menu::analisaPermissaoRecursivo()     *      * @param mixed $moduloCod     * @param mixed $buffer     * @return     */    private function analisaPermissaoRecursivo($moduloCod, $buffer = array())    {        $buffer[$moduloCod] = $moduloCod;        if (empty($this->arrayModulo[$moduloCod]['ModuloCodReferente'])) {            $this->arrayPermissao = array_merge($this->arrayPermissao, $buffer);        } else {            $this->analisaPermissaoRecursivo($this->arrayModulo[$moduloCod]['ModuloCodReferente'], $buffer);        }    }    /**     * Menu::geraModulos()     *      * @param mixed $grupoCod     * @return     */    private function geraModulos($grupoCod)    {        $nModulos = count($this->modulosSemReferencia[$grupoCod]);        //Inicia Módulo        $json = array();        if ($nModulos > 0) {            foreach ($this->modulosSemReferencia[$grupoCod] as $moduloCod) {                if (in_array($moduloCod, $this->arrayPermissao)) {                    array_push($json, $this->geraModulo($moduloCod));                }            }        }        return $json;    }    /**     * Menu::geraModulo()     *      * @param mixed $moduloCod     * @return     */    private function geraModulo($moduloCod)    {        //Se módulo Possui Sub Modulo        if (in_array($moduloCod, $this->modulosComReferencia)) {            return $this->geraSubModulo($moduloCod);        }        $dadosModulo = $this->arrayModulo[$moduloCod];        if (in_array($moduloCod, $this->arrayPermissao) and $dadosModulo['ModuloVisivelMenu'] == 'S') {            return $this->populaModulo($dadosModulo['ModuloNome'], $dadosModulo['ModuloDesc'], $dadosModulo['ModuloNomeMenu'], $this->arrayPacote[$dadosModulo['GrupoModuloCod']], $dadosModulo['ModuloBase'], $dadosModulo['ModuloClass']);        }    }    /**     * Menu::geraSubModulo()     *      * @param mixed $moduloCod     * @return     */    private function geraSubModulo($moduloCod)    {        $dadosSubModulo = $this->arrayModulo[$moduloCod];        $nModulos = count($this->modulosReferentes[$moduloCod]);        $json = array();        if ($nModulos > 0 and in_array($moduloCod, $this->arrayPermissao)) {            $json = $this->iniciaSubModulo($dadosSubModulo['ModuloNome'], $dadosSubModulo['ModuloDesc'], $dadosSubModulo['ModuloNomeMenu'], $dadosSubModulo['ModuloClass']);            foreach ($this->modulosReferentes[$moduloCod] as $referenciaCod) {                if (in_array($referenciaCod, $this->modulosComReferencia)) {                    $json['Subs'][$referenciaCod] = $this->geraModulo($referenciaCod);                } else {                    $json['Subs'][$referenciaCod] = $this->geraModulo($referenciaCod);                }            }            return $json;        }    }    /**     * MenuCss::iniciaSubModulo()     *      * @param mixed $moduloDesc     * @param mixed $nomeMenu     * @return     */    private function iniciaSubModulo($moduloNome, $moduloDesc, $nomeMenu, $moduloClass = '')    {        return array("Modulo" => $moduloNome, "Menu" => $nomeMenu, "MenuDesc" => $moduloDesc, "MenuUrl" => "#", "ModuloClass" => $moduloClass);    }    /**     * MenuCss::populaModulo()     *      * @param mixed $moduloNome     * @param mixed $moduloDesc     * @param mixed $nomeMenu     * @param mixed $pacote     * @param mixed $moduloBase     * @return     */    private function populaModulo($moduloNome, $moduloDesc, $nomeMenu, $pacote, $moduloBase, $moduloClass = '')    {        if ($moduloBase == 'S') {            $Base = SIS_URL_BASE;        } else {            $Base = SIS_URL_BASE;        }        $Url = $this->urlBase . $pacote . "/" . $moduloNome . "/";        return array("Modulo" => $moduloNome, "Menu" => $nomeMenu, "MenuDesc" => $moduloDesc, "MenuUrl" => $Url, "ModuloClass" => $moduloClass, "Subs" => false);    }}
<?/** * @author Pablo Vanni - pablovanni@gmail.com * @since 01/06/2006 * Última Atualização: 28/05/2007 * Última Atualização: 16/03/2010 * Última Atualização: 10/02/2011 Passou a Trabalhar com Vetores - Corrigidos Erros de Acesso - Muitooo Mais Rápida * Autualizada Por: Pablo Vanni - pablovanni@gmail.com * Última Atualização: 08/10/2014 Passou a gerar toda a estrura do menu em uma matriz hierárquica de niveis infinitos. Muito mais abstrata. * Autualizada Por: Feliphe, o Reatliador - feliphezion@gmail.com * @name Gera uma estrutura de menus para acesso aos módulos do sistema, considerando as permissões do usuário logado. * @version 3.0 * @package Framework */ namespace Zion\Menu; class Menu extends MenuSql{    private $urlBase                = NULL;    private $arrayGrupo             = array();    private $arrayModulo            = array();    private $arrayPermissao         = array();    private $gruposSelecionados     = array();    private $modulosSemReferencia   = array();    private $modulosComReferencia   = array();    private $modulosReferentes      = array();    private $arrayPacote            = array();    /**     * Menu::__construct()     * Construtor.     *      * @return     */    public function __construct()    {        parent::__construct();            $this->urlBase = SIS_URL_BASE;    }    /**     * Menu::geraMenu()     * Monta um JSON com a estrutura de menus, de acordo com as permissões atribuídas ao usuário logado.     *      * @return string JSON com a estrura encontrada. Array ([1] => Array ([Grupo] => Grupo Maior [ModulosGrupo] => Modulos e Submodulos do grupo))     * @example Sempre que um array dentro de ModulosGrupo tiver um outro array na chave Subs, este será um subgrupo podendo ter módulos e outros subgrupos, recursivamente. False otherwise.     */    public function geraMenu()    {        if(!isset($_SESSION['UsuarioCod'])){            return json_encode(array("Msg" => "O Usuario nao esta logado."));        }        $usuarioCod = $_SESSION['UsuarioCod'];                $this->arrayGrupo = $this->con->paraArray(parent::gruposDiponiveisSql());        $this->arrayModulo = $this->con->paraArray(parent::modulosDiponiveisSql(), null, "ModuloCod");        $this->arrayPermissao = $this->con->paraArray(parent::usuarioPermissaoModuloSql($usuarioCod), "ModuloCod");        $this->processaDetalhes();        $json;        foreach ($this->arrayGrupo as $dadosGrupo) {            if  (!in_array($dadosGrupo['GrupoModuloCod'], $this->gruposSelecionados)) {                continue;            }            $this->arrayPacote[$dadosGrupo['GrupoModuloCod']] = $dadosGrupo['GrupoModuloPacote'];            $grupoModuloCod = $dadosGrupo['GrupoModuloCod'];            $json[$grupoModuloCod]['Grupo'] = $dadosGrupo['GrupoModuloDesc']; //Inicia um grupo.            $json[$grupoModuloCod]['ModulosGrupo'] = $this->geraModulos($dadosGrupo['GrupoModuloCod']); //Carrega os módulos e subgrupos do grupo recém-iniciado.        }        return json_encode($json);    }    /**     * Menu::processaDetalhes()     *      * @return     */    private function processaDetalhes()    {        $TodosModulos = array();        foreach ($this->arrayModulo as $dadosModulo) {            $TodosModulos[$dadosModulo['ModuloCod']] = $dadosModulo['ModuloCod'];        }        $this->processaPermissoes($TodosModulos);        foreach ($this->arrayModulo as $dadosModulo) {            if (in_array($dadosModulo['ModuloCod'], $this->arrayPermissao)) {                $this->gruposSelecionados[$dadosModulo['GrupoModuloCod']] = $dadosModulo['GrupoModuloCod'];            }            if (empty($dadosModulo['ModuloCodReferente'])) {                $this->modulosSemReferencia[$dadosModulo['GrupoModuloCod']][$dadosModulo['ModuloCod']] = $dadosModulo['ModuloCod'];            } else {                $this->modulosComReferencia[$dadosModulo['ModuloCod']] = $dadosModulo['ModuloCodReferente'];                $this->modulosReferentes[$dadosModulo['ModuloCodReferente']][] = $dadosModulo['ModuloCod'];            }        }    }    /**     * Menu::processaPermissoes()     *      * @param mixed $TodosModulos     * @return     */    private function processaPermissoes($TodosModulos)    {        foreach ($TodosModulos as $moduloCod) {            if (!empty($this->arrayModulo[$moduloCod]['ModuloCodReferente']) and in_array($moduloCod, $this->arrayPermissao)) {                $this->analisaPermissaoRecursivo($moduloCod);            }        }        $this->arrayPermissao = array_unique($this->arrayPermissao);    }    /**     * Menu::analisaPermissaoRecursivo()     *      * @param mixed $moduloCod     * @param mixed $buffer     * @return     */    private function analisaPermissaoRecursivo($moduloCod, $buffer = array())    {        $buffer[$moduloCod] = $moduloCod;        if (empty($this->arrayModulo[$moduloCod]['ModuloCodReferente'])) {            $this->arrayPermissao = array_merge($this->arrayPermissao, $buffer);        } else {            $this->analisaPermissaoRecursivo($this->arrayModulo[$moduloCod]['ModuloCodReferente'], $buffer);        }    }    /**     * Menu::geraModulos()     *      * @param mixed $grupoCod     * @return     */    private function geraModulos($grupoCod)    {        $nModulos = count($this->modulosSemReferencia[$grupoCod]);        //Inicia Módulo        $json = array();        if ($nModulos > 0) {            foreach ($this->modulosSemReferencia[$grupoCod] as $moduloCod) {                if(in_array($moduloCod, $this->arrayPermissao)){                    array_push($json, $this->geraModulo($moduloCod));                }            }        }        return $json;    }       /**     * Menu::geraModulo()     *      * @param mixed $moduloCod     * @return     */    private function geraModulo($moduloCod)    {        //Se módulo Possui Sub Modulo        if (in_array($moduloCod, $this->modulosComReferencia)) {            return $this->geraSubModulo($moduloCod);        }        $dadosModulo = $this->arrayModulo[$moduloCod];        if (in_array($moduloCod, $this->arrayPermissao) and $dadosModulo['ModuloVisivelMenu'] == 'S') {            return $this->populaModulo($dadosModulo['ModuloNome'], $dadosModulo['ModuloDesc'], $dadosModulo['ModuloNomeMenu'], $this->arrayPacote[$dadosModulo['GrupoModuloCod']], $dadosModulo['ModuloBase']);        }    }    /**     * Menu::geraSubModulo()     *      * @param mixed $moduloCod     * @return     */    private function geraSubModulo($moduloCod)    {        $dadosSubModulo = $this->arrayModulo[$moduloCod];        $nModulos = count($this->modulosReferentes[$moduloCod]);        $json = array();        if ($nModulos > 0 and in_array($moduloCod, $this->arrayPermissao)) {            $json = $this->iniciaSubModulo($dadosSubModulo['ModuloDesc'], $dadosSubModulo['ModuloNomeMenu']);            foreach ($this->modulosReferentes[$moduloCod] as $referenciaCod) {                                if (in_array($referenciaCod, $this->modulosComReferencia)) {                    $json['Subs'][$referenciaCod] = $this->geraModulo($referenciaCod);                } else {                    $json['Subs'][$referenciaCod] = $this->geraModulo($referenciaCod);                }            }            return $json;        }    }        /**     * MenuCss::iniciaSubModulo()     *      * @param mixed $ModuloDesc     * @param mixed $NomeMenu     * @return     */    private function iniciaSubModulo($ModuloDesc, $NomeMenu)    {        return array("Menu" => $NomeMenu, "Title" => $ModuloDesc, "Url" => "#");    }    /**     * MenuCss::populaModulo()     *      * @param mixed $ModuloNome     * @param mixed $ModuloDesc     * @param mixed $NomeMenu     * @param mixed $Pacote     * @param mixed $ModuloBase     * @return     */    private function populaModulo($ModuloNome, $ModuloDesc, $NomeMenu, $Pacote, $ModuloBase)    {        if ($ModuloBase == 'S') {            $Base = SIS_URL_BASE;        } else {            $Base = SIS_URL_BASE;        }        $Url = $this->urlBase . $Pacote . "/" . $ModuloNome . "/" . $ModuloNome . ".php";        return array("Menu" => $NomeMenu, "Title" => $ModuloDesc, "Url" => $Url, "Subs" => false);    }}
<?php/** * @author Pablo Vanni - pablovanni@gmail.com * @since 23/02/2005 * Autualizada Por: Pablo Vanni - pablovanni@gmail.com<br> * @name  Paginação de resultado para uma consulta no banco de dados * @version 1.0 * @package Framework */namespace Zion\Paginacao;class Paginacao extends \Zion\Paginacao\PaginacaoVO{    private $con;    private $resultado;    public function __construct($con = NULL)    {        parent::__construct();        if (!$con) {            $this->con = \Zion\Banco\Conexao::conectar();        } else {            $this->con = $con;        }    }    /**     * 	Retorna um ResultSet com um numero determinado de QLinhas     * 	@param QLinhas Inteiro - Número de QLinhas a retotnar no RS     * 	@param Sql String - Query SQL que irá selecionar os dados     * 	@param PaginaAtual Inteiro - Página atual dos QLinhas     * 	@param Chave Inteiro - Campo Chave pelo qual deve ser ordenado os resultados     * 	@param QuemOrdena Inteiro - Número de QLinhas a retotnar no RS     * 	@param TipoOrdenacao String - Número de QLinhas a retotnar no RS     * 	@param Ordena String - Número de QLinhas a retotnar no RS     * 	@return ResultSet     */    public function rsPaginado()    {        $qLinhas = parent::getQLinhas();        $sql = parent::getSql();        $paginaAtual = parent::getPaginaAtual();        $chave = parent::getChave();        $quemOrdena = parent::getQuemOrdena();        $limitAtivo = parent::getLimitAtivo();        //Extremo dos Proximos QLinhas        $inicio = ($paginaAtual == 1) ? 0 : (($paginaAtual * $qLinhas) - $qLinhas);        //Verifica Ordenção        if (!empty($quemOrdena)) {            $ordem = " ORDER BY " . $quemOrdena . " " . parent::getTipoOrdenacao();        } else {            $ordem = " ORDER BY " . $chave . " " . parent::getTipoOrdenacao();        }        //Não é Paginado        if ($qLinhas == 0) {            return $this->con->executar($sql . " " . $ordem);        }        //Definir Limit        if ($limitAtivo) {            $limit = ($qLinhas <> 0) ? " LIMIT " . $inicio . "," . $qLinhas : "";        }        //Retorno        $rS = $this->con->executar($sql . $ordem . $limit);        return $rS;    }    /**     * 	Retorna um ResultSet com um numero determinado de QLinhas     * 	@param QLinhas Inteiro - Número de QLinhas a retotnar no RS     * 	@param Sql String - Query SQL que irá selecionar os dados     * 	@param PaginaAtual Inteiro - Página atual dos QLinhas     * 	@param IrParaPagina Booleano - Ir diretamente para a página desejada habilitar ou não esta opação na paginação     * 	@return Booleano     */    public function listaResultados()    {        $qLinhas = parent::getQLinhas();        $paginaAtual = parent::getPaginaAtual();        $quemOrdena = parent::getQuemOrdena();        $metodoFiltra = parent::getMetodoFiltra();        if (substr_count(strtoupper(parent::getSql()), 'SELECT ') > 1) {            $numLinhas = $this->con->execNLinhas(parent::getSql());        } else {            $numLinhas = $this->con->execRLinha($this->converteSql(parent::getSql()));        }        //Total de Páginas        $totalPaginas = ceil($numLinhas / $qLinhas);        $final = $totalPaginas <= 1 ? $numLinhas : $qLinhas;        //Imprimindo QLinhas        if ($totalPaginas > 1) {            //Verifica se existe variavel para QuemOrdena de ordenação            if (!empty($quemOrdena)) {                Parametros::setParametros("Full", array("qo" => $quemOrdena));            }            $anterior = '';            $proximo = '';            //Anterior            if ($paginaAtual > 1) {                Parametros::setParametros("Full", array("pa" => ($paginaAtual - 1)));                $onclick = $metodoFiltra . '(\'' . Parametros::getQueryString() . '\'); sis_spa(\'' . ($paginaAtual - 1) . '\');';                $anterior = '<button type="button" class="btn btn-lg" title="Voltar" onclick="' . $onclick . '"><i class="fa fa-chevron-left"></i></button>';            } else {                $anterior = '<button type="button" class="btn btn-lg disabled" title="Voltar"><i class="fa fa-chevron-left"></i></button>';            }            //Proxima            if ($paginaAtual < $totalPaginas) {                Parametros::setParametros("Full", array("pa" => ($paginaAtual + 1)));                $onclick = $metodoFiltra . '(\'' . Parametros::getQueryString() . '\'); sis_spa(\'' . ($paginaAtual + 1) . '\');';                $proximo = '<button type="button" class="btn btn-lg" title="Avan&ccedil;ar" onclick="' . $onclick . '"><i class="fa fa-chevron-right"></i></button>';            } else {                $proximo = '<button type="button" class="btn btn-lg disabled" title="Avan&ccedil;ar"><i class="fa fa-chevron-right"></i></button>';            }            //Calculo de Páginas            if ($paginaAtual == 1) {                $iPAG = 1;                $fPAG = $numLinhas > $qLinhas ? $qLinhas : $numLinhas;            } else {                $iPAG = ((($paginaAtual - 1) * $qLinhas) + 1);                $fPAG = $paginaAtual == $totalPaginas ? $numLinhas : $paginaAtual * $qLinhas;            }            //Parte C            $retorno = '<div class="btn-toolbar pull-right">				<div class="btn-group">					' . $anterior . '					' . $proximo . '				</div>			</div>';            $this->resultado = '<div class="table-footer alinD"><em>Mostrando ' . $final . ' de ' . $numLinhas . ' registro(s)</em></div>';            return $retorno;        } else {            $this->resultado = '<div class="table-footer alinD"><em>Mostrando ' . $final . ' de ' . $numLinhas . ' registro(s)</em></div>';            return '<div class="btn-toolbar pull-right">				<div class="btn-group">					<button type="button" class="btn btn-lg disabled" title="Voltar"><i class="fa fa-chevron-left"></i></button>					<button type="button" class="btn btn-lg disabled" title="Avan&ccedil;ar"><i class="fa fa-chevron-right"></i></button>				</div>			</div>';        }    }    public function getResultado()    {        return $this->resultado;    }    private function converteSql($sql)    {        return preg_replace('/SELECT.*FROM/i', 'SELECT COUNT(*) as Total FROM ', preg_replace('/\s/i', ' ', $sql));    }}
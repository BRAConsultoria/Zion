<?php/***	@copyright DEMP - Soluções em Tecnologia da Informação Ltda*	@author Pablo Vanni - pablovanni@gmail.com*	@since 23/02/2005*	<br>Última Atualização: 05/04/2007<br>*	Autualizada Por: Pablo Vanni - pablovanni@gmail.com<br>*	@name Verifica permissões e fornece iformações sobre modulos* 	@version 2.0*  	@package Framework*///Classes Nescessáriasinclude_once($_SESSION['FMBase'].'javascript.class.php');include_once($_SESSION['FMBase'].'conexao.class.php');include_once($_SESSION['FMBase'].'acesso.bd.php');include_once($_SESSION['FMBase'].'acesso.gs.php');class Acesso extends AcessoGS {    private $AcessoBD;    /**    *	Metodo Construtor    *	@return VOID    */    public function Acesso()    {        $this->Con      = Conexao::conectar();        $this->Js       = new JavaScript();        $this->AcessoBD = new AcessoBD();        parent::setModulo(MODULO);        parent::setUsuarioCod($_SESSION['UsuarioCod']);    }    public function verificaEntrada()    {                if(empty($_SESSION['UsuarioCod']))        {            $Msg = ConfigSIS::$CFG['AcessoNegado'];            $ReferenciaAnterior = "&Ref=".urlencode($_SERVER['HTTP_REFERER']);            $Mobile = parent::getMobile();                        echo $this->Js->entreJS($this->Js->alerta($Msg).$this->Js->redir($_SESSION['UrlBase'].$Mobile."?Msg=1".$ReferenciaAnterior));            exit($Msg);        }    }    /**    *	Verifica se o usuário tem permissão de entrada    *	@return String    */    public function acessoModulo()    {               $this->verificaEntrada();        $Mobile = parent::getMobile();        //Permissões de Módulo        try        {            if(!$this->permissao())            {                $Msg = ConfigSIS::$CFG['SemPrivilegios'];                //echo $this->Js->entreJS($this->Js->alerta($Msg).$this->Js->redir($_SESSION['UrlBase'].$Mobile."principal.php"));                exit('<a href="'.$_SESSION['UrlBase'].$Mobile."principal.php".'">'.$Msg.'</a>');            }        }        catch (Exception $E)        {            echo $this->Js->entreJS($this->Js->alerta($E->getMessage()).$this->Js->redir($_SESSION['UrlBase'].$Mobile."principal.php"));        }    }    /**    *	Retorna a descrição do módulo indicado pelo parametro    *	@return String    */    public function nomeModulo()    {        $Modulo = parent::getModulo();        try        {            return $this->AcessoBD->dadosModulo($Modulo);        }        catch(Exception $E)        {            return "Indefinido";        }    }    /**    *	Verifica se o usuário tem permissão para acessar o módulo    *	@return Booleano    */    public function permissao()    {        $Opcao      = parent::getOpcao();        $UsuarioCod = parent::getUsuarioCod();        $Modulo     = parent::getModulo();        try        {            if($Opcao != "")                return $this->AcessoBD->permissao($Opcao,$UsuarioCod,$Modulo);                    else                        return $this->AcessoBD->permissaoMinima($UsuarioCod,$Modulo);        }        catch(Exception $E)        {            throw new Exception($E->getMessage());        }    }    /**    *	Retorna as opções que o usuário tem direito    *	@return Array()    */    public function opPermissao()    {        $UsuarioCod = parent::getUsuarioCod();        $Modulo     = parent::getModulo();        try        {            return $this->AcessoBD->opPermissao($UsuarioCod, $Modulo);        }        catch(Exception $E)        {            return array();        }    }    /**    *	Retorna as informações de permissãoo de acesso aos modulos    *	@param Permissoes Array - Array com informações das permissões    *	@return Booleano    */    public function verificaAcesso($Permissoes)    {        $Acao = parent::getAcao();        if(empty($Acao))        {            return (in_array($Permissoes,"S")) ? true : false;        }        else        {            return ($Permissoes[$Acao] == "S") ? true : false;        }    }    /**    *	Define por extenso o tipo de ação    *	@param Valor String - Código da Açaõ    *	@return String    */    public function acao()    {        $Acao   = $this->getAcao();        $Modulo = $this->getModulo();        try        {            return $this->AcessoBD->retornaAcao($Modulo, $Acao);        }        catch (Exception $E)        {            return "Indefinida";        }    }    public function opcaoExt($Op)    {        switch($Op)        {            case "Cad": return "Cadastrar"; break;            case "Alt": return "Alterar"; break;            case "Del": return "Remover"; break;            case "Fil": return "Filtrar"; break;            case "Vis": return "Visualizar"; break;            default: return "";        }    }}
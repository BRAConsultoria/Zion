<?php/** * @author Pablo Vanni - pablovanni@gmail.com * @since 23/02/2005 * Última Atualização: 14/10/2014 * Autualizada Por: Pablo Vanni - pablovanni@gmail.com * @name Verifica permissões e fornece informações de acesso sobre modulos */namespace Zion\Acesso;class Acesso extends AcessoVO{    private $acessoSql;    private $con;   /**    * Ao iniciar a intancia com o parametro de ação, será verificado    * automaticamente se existe permissão para a ação.    * Este método tambem seta o nome do módulo que previamente deveria existir    * como constante e tambem o código do usuário ativo que previamente    * deveria existir na sessão ativa.    * @param string $acaoModuloIdPermissao    * @throws \Exception    */    public function __construct($acaoModuloIdPermissao = '')    {        $this->con = \Zion\Banco\Conexao::conectar();        $this->acessoSql = new AcessoSql();        parent::setModuloNome(constant('MODULO'));        parent::setUsuarioCod($_SESSION['usuarioCod']);                if(!empty($acaoModuloIdPermissao)){            if(!$this->permissaoAcao($acaoModuloIdPermissao)){                throw new \Exception('Sem permissão');            }        }    }    /**     * Ao informar a acão, o metodo verifica se o usuário tem acesso a ela (ação),     * este método captura automaticamente o usuarioCod da sessão e nome do      * módulo que deve ser definido como variavel constante     * @param string $acaoModuloIdPermissao     * @return bool     */    public function permissaoAcao($acaoModuloIdPermissao)    {        return (bool) $this->con->execNLinhas($this->acessoSql->permissaoAcao(parent::getModuloNome(), $acaoModuloIdPermissao, parent::getUsuarioCod()));    }    /**     * Retorna os dados de um módulo, o módulo em questão estaria definido previamente     * como uma constante     * @return array     */    public function dadosModulo()    {        return $this->con->execLinha($this->acessoSql->dadosModulo(parent::getModuloNome()));    }    /**     * Retorna os dados de uma ação de um módulo,     * este método captura automaticamente o usuarioCod da sessão e nome do      * módulo que deve ser definido como variavel constante     * @param string $acaoModuloIdPermissao     * @return array     */    public function dadosAcaoModulo($acaoModuloIdPermissao)    {        return $this->con->execLinha($this->acessoSql->dadosAcaoModulo(parent::getModuloNome, $acaoModuloIdPermissao));    }    /**     * Retorna as opções de módulo que o usuário tem direito     * @return array     */    public function permissoesModulo()    {        return $this->con->paraArray($this->acessoSql->permissoesModulo(parent::getModuloNome(), parent::getUsuarioCod()),null, 'acaomoduloidpermissao');    }}
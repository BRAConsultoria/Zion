<? /***	@copyright DEMP - Soluções em Tecnologia da Informação Ltda*	@author Pablo Vanni - pablovanni@gmail.com*	@since 18/11/2005*	<br>Última Atualização: 11/08/2008<br>*	Autualizada Por: Pablo Vanni - pablovanni@gmail.com<br>*	@name Cria uma grid de resultados com paginação* 	@version 2.0* 	@package Framework*///Classes Nescessáriasinclude_once($_SESSION['FMBase'].'paginacao.class.php');include_once($_SESSION['FMBase'].'grid.gs.php');abstract class Grid extends GridGS {    /**    * 	@param MeusDadosConverte Array - Objeto do tipo ObjConverte    * 									 usado para passar uma funcao    * 									 ao setCondicaoTodosResultados    */    private $MeusDadosConverte = null;    /**    *	Cria um link de ordenação    *	@param Valor String - Identificação do Titulo para ordenação    *	@param NomePagina String - Nome da Pagina que deve ser chamada    *	@param CampoBd String - Campo da Tabela a Ser ordenado    * 	@param Parametros String - Parametros do Filtro        *	@return String    */    public function ordena($Valor, $CampoTb)    {                $QuemOrdena    = parent::getQuemOrdena();        $MetodoFiltra  = parent::getMetodoFiltra();        $PaginaAtual   = parent::getPaginaAtual();        $NaoOrdenePor  = parent::getNaoOrdenePor();        //Iniciar ordenando Ascendente        $TipoOrdenacao = (empty($_REQUEST['TipoOrdenacao'])) ? 'ASC' : parent::getTipoOrdenacao();        //Verifica Se o Não Permite Ordenação        if(in_array($CampoTb,$NaoOrdenePor))        {            return "<span class=\"linkpag\">".$Valor."</span>";        }        if("$CampoTb" == "$QuemOrdena")        {            if($TipoOrdenacao == "DESC")            {                $NovoTipo = "ASC";                $Img = " <img src=\"".$_SESSION['UrlBase']."figuras/desc.gif\" border=\"0\">";            }            else            {                $NovoTipo = "DESC";                $Img = " <img src=\"".$_SESSION['UrlBase']."figuras/asc.gif\" border=\"0\">";            }            //Seta Quem ordena            Parametros::setParametros("Full",array("QuemOrdena"=>$CampoTb,"PaginaAtual"=>$PaginaAtual));            //Muda o Tipo de Ordenação do Link            $QS = Parametros::addQueryString(Parametros::getQueryString(), array("TipoOrdenacao"=>$NovoTipo));        }        else        {            //Seta quem ordena e o tipo de ordenacao            Parametros::setParametros("Full",array("QuemOrdena"=>$CampoTb,"TipoOrdenacao"=>$TipoOrdenacao,"PaginaAtual"=>$PaginaAtual));            //Recupera QS            $QS = Parametros::getQueryString();        }        //Ordenação        if(!empty($NovoTipo)) $TipoOrdenacao = $NovoTipo;        //Imagem de Ordenação        $IOr = "<img src=\"".$_SESSION['UrlBase']."figuras/ordem.gif\" border=\"0\">";        return "<a href=\"javascript:sis_svo('".$CampoTb."','".$TipoOrdenacao."'); ".$MetodoFiltra."('".$QS."');\" class=\"linkpag\" title=\"Ordenar\">".$IOr.$Valor.$Img."</a>";    }    public function converteValor($Linha, $DadosConverte)    {        $DadosConverte = (is_array($DadosConverte) ? $DadosConverte : $this->MeusDadosConverte);        $Objeto = $DadosConverte[0];        $Metodo = $DadosConverte[1];        $Campo  = $DadosConverte[2];        $PI     = (empty($DadosConverte[3])) ? array() : $DadosConverte[3];        $PE     = (empty($DadosConverte[4])) ? array() : $DadosConverte[4];        $Ordem  = $DadosConverte[5];        if(!empty($PI)) foreach ($PI as $Valor) $ArrayPI[] = $Linha[$Valor];        if($Ordem == "IE")        {            $ArParametros = (empty($ArrayPI)) ? $PE : @array_merge($ArrayPI,$PE);        }        else        {            $ArParametros = (empty($ArrayPI)) ? $PE : @array_merge($PE,$ArrayPI);        }        if(!is_array($ArParametros))        {            return $Linha[$Campo];        }        else        {            foreach ($ArParametros as $Valores) $Parametros .= "'".$Valores."',";            $Parametros = substr($Parametros, 0, -1);            eval("\$Retorno = \$Objeto->$Metodo($Parametros);");            return $Retorno;        }    }    public function processaTotalizador($Config, $Itens)    {        $FPHP = new FuncoesPHP();        if(!empty($Config) and !empty($Itens) and is_array($Itens))        {            $Resultado = 0;            switch($Config['Tipo'])            {                case 'Conta':                    $Resultado = count($Itens);                                                        break;                case 'Soma':                    $Itens = $this->traduzItens($Itens);                                            $Resultado = array_sum($Itens);                break;                case 'Media':                    $Itens = $this->traduzItens($Itens);                    $Resultado = round(array_sum($Itens)/count($Itens),2);                break;                default :$Resultado = " - ";           }           switch($Config['Mascara'])           {                case "Moeda":                     return $Config['Prefixo']." ".$FPHP->floatCliente($Resultado)." ".$Config['Sufixo'];                break;                                default:                    return $Config['Prefixo']." ".$Resultado." ".$Config['Sufixo'];           }        }        return "-";    }    private function traduzItens($Itens)    {        $FPHP = new FuncoesPHP();        //Traduzindo Valores        foreach($Itens as $Chave => $Valor)        {            $Traduzido = $FPHP->floatBanco(implode(preg_split('/[^[:digit:] (,.)]/', $Valor)));            $Itens[$Chave] = $Traduzido;        }        return $Itens;    }    public function inForm($Valor, $NomeForm)    {        $IniForm  = '<form id="'.$NomeForm.'" name="'.$NomeForm.'" method="post" class="forms" onSubmit="return false">';        $FimForm  = '</form>';        return $IniForm.$Valor.$FimForm;    }    public function resultadoEval($Linha, $EvalCod)    {        eval($EvalCod[0]);        return $R;    }    public function setMeusDadosConverte($DadosConverte)    {        $this->MeusDadosConverte = $DadosConverte;    }}
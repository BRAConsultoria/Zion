<?php/** *   @copyright CenterSis - Sistemas Para Internet *   @author Pablo Vanni - pablovanni@gmail.com *   @since 18/11/2005 *   Última Atualização: 13/10/2014 *   Autualizada Por: Pablo Vanni - pablovanni@gmail.com *   @name Cria uma grid de resultados com paginação */namespace Zion\Grid;class GridPadrao extends Grid{    private $con;    private $paginacao;    private $html;    private $botoes;    public function __construct($con = NULL)    {        parent::__construct();        $this->con = (!is_object($con)) ? \Zion\Banco\Conexao::conectar() : $this->con = $con;        $this->paginacao = new \Zion\Paginacao\Paginacao($con);        $this->html = new \Zion\Layout\Html();        $this->botoes = new GridBotoes();        //Padrões Iniciais        parent::setTipoOrdenacao(filter_input(INPUT_GET, 'to'));        parent::setQuemOrdena(filter_input(INPUT_GET, 'qo'));        parent::setPaginaAtual(filter_input(INPUT_GET, 'pa'));        parent::setQLinhas(10); //ConfigSIS::$CFG['qLinhasGrid']    }    public function tituloGridPadrao()    {        $titulos = parent::getTitulos();        $listados = parent::getListados();        $html = $this->html->abreTagAberta('thead');        $html .= $this->html->abreTagAberta('tr');        $html .= $this->html->abreTagFechada('th');        //Titulos        foreach ($titulos as $Key => $value) {            $classAlinha = parent::getAlinhamento($listados[$Key]);            $html .= $this->html->abreTagAberta('th', ['class' => $classAlinha]);            $html .= parent::ordena($value, $listados[$Key]);            $html .= $this->html->fechaTag('th');        }        $html .= $this->html->fechaTag('tr');        $html .= $this->html->fechaTag('thead');        return $html;    }    /**     * 	Contrução da Grid de Dados     * 	@param Opcoes Array - Indica se cada item deve ser habilitado     * 	@param QLinhas Inteiro - Número de Resultados por pagina     * 	@param PaginaAtual Inteiro - Número da Pagina Atual     * 	@param Parametros String - Query String com parametros nescessarios      * 	@return String     */    public function montaGridPadrao()    {        //Recupera Valores        $sql = parent::getSql();        $tabelaMestra = parent::getTabelaMestra();        $sqlContador = parent::getSqlContador();        $filtroAtivo = parent::getFiltroAtivo();        $limitAtivo = parent::getLimitAtivo();        $listados = parent::getListados();        $chave = parent::getChave();        $formatarComo = parent::getFormatarComo();        $totalizador = parent::getTotalizador();        $larguras = parent::getLarguraFixa();        $valorTotalizadores = array();        $qLinhas = parent::getQLinhas();        //Verifica se o SQL não esta Vazio        if (empty($sql)) {            throw new Exception("Valor selecionado inválido!");        }        //Se Formatações existem, intancie funções PHP        if (!empty($formatarComo)) {            $fPHP = new \Zion\Validacao\Valida();        }        //Iniciando valores        $i = 0;        $html = "";        $paginado = "";        //Monta Paginanação        if ($qLinhas > 0) {            //Setando Valores para paginação            $this->paginacao->setSql($sql);            $this->paginacao->setTabelaMestra($tabelaMestra);            $this->paginacao->setSqlContador($sqlContador);            $this->paginacao->setFiltroAtivo($filtroAtivo);            $this->paginacao->setLimitAtivo($limitAtivo);            $this->paginacao->setChave($chave);            $this->paginacao->setQLinhas($qLinhas);            $this->paginacao->setPaginaAtual(parent::getPaginaAtual());            $this->paginacao->setTipoOrdenacao(parent::getTipoOrdenacao());            $this->paginacao->setQuemOrdena(parent::getQuemOrdena());            $this->paginacao->setMetodoFiltra(parent::getMetodoFiltra());            $this->paginacao->setAlterarLinhas(parent::getAlterarLinhas());            $rs = $this->paginacao->rsPaginado();            $paginado = $this->paginacao->listaResultados();        } else {            $rs = $this->con->executar($sql);        }        $nLinhas = $this->con->nLinhas($rs);        //Contruindo grid        if ($nLinhas > 0) {            $html .= $this->html->abreTagAberta('div', ['id' => 'grid-control']);            //Inicia Container dos Botões e Paginação            $html .= $this->html->abreTagAberta('div', ['class' => 'clearfix recI10px']);            //Botões            $html .= $this->botoes->geraBotoes();            //Paginação            $html .= $paginado;            $html .= $this->html->fechaTag('div');            $html .= $this->html->abreTagAberta('div', ['class' => 'table-primary']);            $html .= $this->html->abreTagAberta('table', ['class' => 'table table-bordered']);            //Objeto de Converssão (Objeto Pastor :D)            $ObjC = $this->getObjetoConverte();            //Estilos de um resultado (ESTILO DE RESULTADO ÚNICO)            $eRU = $this->getCondicaoResultadoUnico();            $eTR = $this->getCondicaoTodosResultados();            while ($linha = $rs->fetch_array()) {                $i += 1;                $cRT = "";                if (is_array($eTR)) {                    foreach ($eTR as $rT) {                        if ($this->resultadoEval($linha, array($rT[0])) === true) {                            $cRT = $rT[1];                        }                    }                }                if ($i == 1) {                    $html .= $this->tituloGridPadrao();                }                //$html .= $this->html->abreTr();                $html .= $this->html->abreTagAberta('tbody');                $html .= $this->html->abreTagAberta('tr');                $html .= $this->thCheck();                foreach ($listados as $value) {                    //Valor com possivel converssão                    $valorItem = (!empty($ObjC[$value])) ? $this->converteValor($linha, $ObjC[$value]) : $linha[$value];                    //Estilo de Resultado Único                    $cRU = "";                    if (!empty($eRU[$value])) {                        if ($this->resultadoEval($linha, $eRU[$value]) === true) {                            $cRU = $eRU[$value][1];                        }                    }                    //Formatação                    if (!empty($formatarComo)) {                        if (!empty($formatarComo[$value])) {                            $como = strtoupper($formatarComo[$value]);                            switch ($como) {                                case "DATA" : $valorItem = $fPHP->data()->converteData($valorItem);                                    break;                                case "DATAHORA": $valorItem = $fPHP->data()->converteDataHora($valorItem);                                    break;                                case "NUMERO" : $valorItem = $fPHP->numero()->floatCliente($valorItem);                                    break;                                case "MOEDA" : $valorItem = $fPHP->numero()->moedaCliente($valorItem);                                    break;                            }                        }                    }                    //Totalizadores                    if (!empty($totalizador)) {                        if (!empty($totalizador[$value])) {                            $valorTotalizadores[$value][] = $valorItem;                        }                    }                    //Alinhamento                    $classAlinha = parent::getAlinhamento($value);                    $html .= $this->html->abreTagAberta('td');                    $html .= ($valorItem == "") ? "&nbsp;" : $valorItem;                    $html .= $this->html->fechaTag('td');                }                //$html .= $this->html->fechaTr();                $html .= $this->html->fechaTag('tr');                $html .= $this->html->fechaTag('tbody');            }            /* Totalizadores da Grid */            if (!empty($totalizador)) {                //$html .= $this->html->abreTr("", "sis_grid_totalizado");                $html .= $this->html->abreTagAberta('tr');                //Td de Checagem                //$html .= $this->html->abreTd() . "&nbsp;" . $this->html->fechaTd();                $html .= $this->html->abreTagAberta('td');                foreach ($listados as $itenListado) {                    //Alinhamento                    $classAlinha = parent::getAlinhamento($itenListado);                    //$html .= $this->html->abreTd(null, $classAlinha);                    $html .= $this->html->abreTagAberta('td');                    $html .= parent::processaTotalizador($totalizador[$itenListado], $valorTotalizadores[$itenListado]);                    //$html .= $this->html->fechaTd();                    $html .= $this->html->fechaTag('td');                }                $html .= $this->html->fechaTr();            }            //$html .= $this->html->htmlFim();            $html .= $this->html->fechaTag('table');            $html .= $this->html->fechaTag('div');            $html .= $this->html->fechaTag('div');        } else {            return '<div class="table-footer alinD"><em>Nenhum resultado encontrado.</em></div>';        }        if (!empty($paginado) or ! empty($totalizador)) {            return $html . $this->paginacao->getResultado();        } else {            return $html . $this->paginacao->getResultado();        }    }    public function thCheck()    {        return $this->html->abreTagAberta('th') . $this->html->abreTagAberta('input', ['type' => 'checkbox']) . $this->html->fechaTag('th');    }}
<? /***	@copyright DEMP - Soluções em Tecnologia da Informação Ltda*	@author Pablo Vanni - pablovanni@gmail.com*	@since 18/11/2005*	<br>Última Atualização: 11/08/2008<br>*	<br>Última Atualização: 18/02/2011<br> Sets programados*	Autualizada Por: Pablo Vanni - pablovanni@gmail.com<br>*	@name Cria uma grid de resultados com paginação* 	@version 2.0* 	@package Framework*/include_once($_SESSION['FMBase'].'paginacao.gs.php');abstract class GridGS extends PaginacaoGS{	/**	*	Atributos da Classe	*/		private $Titulos       = array();//Array - Array Com Conjunto de Titulos a Serem Exibidos na Grid 	private $Listados      = array();//Array - Array Com Conjunto de Atributos a Serem Exibidos na Grid  		private $Alinhamento   = array();//Array - Array Com Informações de Alinhamento em Cada Campo		private $NaoOrdenePor  = array();//Array - Array Com Atrubutos que não devem ser ordenados na grid		private $CondicaoResultadoUnico  = "";//String - Recebe uma estring com uma condição PHP para se obter uma particularidade para um unico resultado	private $CondicaoTodosResultados = "";//String - Recebe uma estring com uma condição PHP para se obter uma particularidade para uma linha de resultados		private $ObjConverte = array();//Objeto - Recebe Um objeto de Converssão para os elementos da grid 			private $ModoImpressao = false;    private $FormatarComo = array();//Array que recebe o campo e como deve formata-lo    private $Totalizador = array();//Array que recebe informações de Totalizadores    private $LarguraFixa = array();//Array que recebe informações de Largura de Cada Item da Grid		/**	*	Titulos	*/		public function setTitulos($Valor)	{        if(!is_array($Valor)) throw new Exception("Grid: Titulos informado inválido!");        		$this->Titulos = $Valor;	}	public function getTitulos()	{		return $this->Titulos;	}	/**	*	Listados	*/			public function setListados($Valor)	{		if(!is_array($Valor)) throw new Exception("Grid: Listados informado inválido!");                $this->Listados = $Valor;	}	public function getListados()	{		return $this->Listados;	}			/**	*	Alinhamento	*/			public function setAlinhamento($Valor)	{                      if(!is_array($Valor)) throw new Exception("Grid: Alinhamento informado inválido!");        $this->Alinhamento = $Valor;	}	public function getAlinhamento($Valor)	{		if (empty($Valor)) return "";				$Valor = $this->Alinhamento[$Valor];				switch (strtoupper($Valor))		{			case "DIREITA": return " sis_al_direita ";  break;			case "CENTRO":  return " sis_al_center ";  break;			default:        return "";		}	}			/**	*	Condição para resultados Unicos	*/			public function setCondicaoResultadoUnico($Campo, $Condicao, $Class)	{		$this->CondicaoResultadoUnico[$Campo] = array($Condicao, $Class);	}		public function getCondicaoResultadoUnico()	{		return $this->CondicaoResultadoUnico;	}			/**	*	Condição para todos os resultados de uma linha	*/			public function setCondicaoTodosResultados($Condicao, $Class)	{		$this->CondicaoTodosResultados[] = array($Condicao, $Class);	}		public function getCondicaoTodosResultados()	{		return $this->CondicaoTodosResultados;	}	/**	*	Objeto Converte	*/		public function setObjConverte($Objeto, $Metodo, $Campo, $ParametrosInternos = null, $ParemetrosExternos = null, $Ordem = 'IE')	{		        if(!is_object($Objeto)) throw new Exception("Grid: Objeto informado inválido!");        if(!is_string($Metodo)) throw new Exception("Grid: Metodo informado inválido!");        if(!is_string($Campo))  throw new Exception("Grid: Campo informado inválido!");                if(!empty($ParametrosInternos))        if(!is_array($ParametrosInternos)) throw new Exception("Grid: ParametrosInternos informado inválido!");        if(!empty($ParemetrosExternos))        if(!is_array($ParemetrosExternos)) throw new Exception("Grid: ParametrosInternos informado inválido!");        $Ordem = strtoupper($Ordem);        if(!in_array($Ordem,array("IE","EI"))) throw new Exception("Grid: Ordem informado inválido!");        $this->ObjConverte[$Campo] = array($Objeto, $Metodo, $Campo, $ParametrosInternos, $ParemetrosExternos, $Ordem);	}		public function getObjetoConverte()	{		return $this->ObjConverte;	}	/**	*	Não Ordene Por	*/	public function setNaoOrdenePor($Valor)	{		if(!is_array($Valor)) throw new Exception("Grid: NaoOrdenePor informado inválido!");                $this->NaoOrdenePor = $Valor;	}	public function getNaoOrdenePor()	{		return $this->NaoOrdenePor;	}		public function setModoImpressao($Valor)	{        $this->ModoImpressao = (bool) $Valor;	}	public function getModoImpressao()	{		return $this->ModoImpressao;	}    public function setFormatarComo($Identificacao, $Como)	{		if(!is_string($Identificacao)) throw new Exception("Grid: FormatarComo parametro 1 informado inválido!");        if(!is_string($Como)) throw new Exception("Grid: FormatarComo parametro 2 informado inválido!");        $this->FormatarComo[$Identificacao] = $Como;	}	public function getFormatarComo()	{		return $this->FormatarComo;	}    public function setTotalizador($Identificador, $Configuracoes)	{        if(!is_string($Identificador)) throw new Exception("Grid: Totalizador parametro 1 informado inválido!");        if(!is_array($Configuracoes)) throw new Exception("Grid: Totalizador parametro 2 informado inválido!");        $this->Totalizador[$Identificador] = $Configuracoes;	}	public function getTotalizador()	{		return $this->Totalizador;	}    public function setLarguraFixa($Larguras)	{        if(!is_array($Larguras)) throw new Exception("Grid: Largura parametro 1 informado inválido!");        $this->LarguraFixa = $Larguras;	}	public function getLarguraFixa()	{		return $this->LarguraFixa;	}}
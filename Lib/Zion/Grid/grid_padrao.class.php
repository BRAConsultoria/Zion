<? /***	@copyright CenterSis - Sistemas Para Internet*	@author Pablo Vanni - pablovanni@gmail.com*	@since 18/11/2005*	<br>Última Atualização: 16/05/2006<br>*	Autualizada Por: Pablo Vanni - pablovanni@gmail.com<br>*	@name Cria uma grid de resultados com paginação* 	@version 2.0* 	@package Framework*///Classes Nescessáriasinclude_once($_SESSION['FMBase'].'paginacao.class.php');include_once($_SESSION['FMBase'].'conexao.class.php');include_once($_SESSION['FMBase'].'tabelas.class.php');include_once($_SESSION['FMBase'].'botoes_acesso.class.php');include_once($_SESSION['FMBase'].'grid.class.php');class GridPadrao extends Grid {    /**    *	Atributos da Classe    */	    private $Con, $Pag, $Tab;    /**    *	Metodo Construtor    *	@return VOID    */    public function __construct($Con = NULL)    {        if(!$Con)        {            $this->Con = Conexao::conectar();        }        else        {            $this->Con = $Con;        }                $this->Pag = new Paginacao($this->Con);        $this->Tab = new Tabelas();        //Padrões Iniciais        parent::setTipoOrdenacao($_GET['TipoOrdenacao']);        parent::setQuemOrdena($_GET['QuemOrdena']);        parent::setPaginaAtual($_GET['PaginaAtual']);        parent::setQLinhas(ConfigSIS::$CFG['QLinhasGrid']);        parent::setModoImpressao($_GET['ModoPrint']);    }			    public function tituloGridPadrao()    {        $Titulos   = parent::getTitulos();        $Listados  = parent::getListados();        $ModoPrint = parent::getModoImpressao();        $Html  = $this->Tab->abreTr();        if(parent::getModoImpressao() == false)        $Html .= $this->Tab->abreTd('checkFill', ConfigSIS::$CFG['ClassTitulo']).'<input type="checkbox" name="checkTodos" id="checkTodos" value="null" onclick="sis_selecionar()" />'.$this->Tab->fechaTd();        //Titulos        foreach($Titulos as $Key=>$Value)        {			            //Alinhamento            $ClassAlinha = parent::getAlinhamento($Listados[$Key]);            $Html .= $this->Tab->abreTd(null, ConfigSIS::$CFG['ClassTitulo'].$ClassAlinha);            $Html .= ($ModoPrint == true) ? $Titulos[$Key] : parent::ordena($Value, $Listados[$Key]);            $Html .= $this->Tab->fechaTd();        }        $Html .= $this->Tab->fechaTr();        return $Html;	    }				     /**    *	Contrução da Grid de Dados    *	@param Opcoes Array - Indica se cada item deve ser habilitado    *	@param QLinhas Inteiro - Número de Resultados por pagina    *	@param PaginaAtual Inteiro - Número da Pagina Atual    *	@param Parametros String - Query String com parametros nescessarios     *	@return String    */    public function montaGridPadrao()    {						        //Recupera Valores        $Sql          = parent::getSql();        $TabelaMestra = parent::getTabelaMestra();        $SqlContador  = parent::getSqlContador();        $FiltroAtivo  = parent::getFiltroAtivo();        $LimitAtivo   = parent::getLimitAtivo();        $Titulos      = parent::getTitulos();        $Listados     = parent::getListados();        $Chave        = parent::getChave();        $FormatarComo = parent::getFormatarComo();        $Totalizador  = parent::getTotalizador();        $Larguras     = parent::getLarguraFixa();        $ValorTotalizadores = array();        $ModoPrint = parent::getModoImpressao();        //$QLinhas   = ($ModoPrint === true) ? 0 : parent::getQLinhas();        $QLinhas   =  parent::getQLinhas();        //Verifica se o SQL não esta Vazio        if(empty($Sql))	throw new Exception("Valor selecionado inválido!");        //Se Formatações existem, intancie funções PHP        if(!empty($FormatarComo))  $FPHP = new FuncoesPHP();        //Iniciando valores        $I        = 0;        $Html     = "";        $Paginado = "";        //Monta Paginanação        //if($QLinhas > 0)        //{			            //Setando Valores para paginação            $this->Pag->setSql($Sql);            $this->Pag->setTabelaMestra($TabelaMestra);            $this->Pag->setSqlContador($SqlContador);            $this->Pag->setFiltroAtivo($FiltroAtivo);            $this->Pag->setLimitAtivo($LimitAtivo);            $this->Pag->setChave($Chave);            $this->Pag->setQLinhas($QLinhas);            $this->Pag->setPaginaAtual(parent::getPaginaAtual());            $this->Pag->setTipoOrdenacao(parent::getTipoOrdenacao());            $this->Pag->setQuemOrdena(parent::getQuemOrdena());            $this->Pag->setMetodoFiltra(parent::getMetodoFiltra());            $this->Pag->setAlterarLinhas(parent::getAlterarLinhas());            $Exec = $this->Pag->rsPaginado();                        if($ModoPrint !== true)            $Paginado = $this->Pag->listaResultados();        //}        //else         //{        //    $Exec = $this->Con->executar($Sql);        //}        $NLinhas = $this->Con->NLinhas($Exec);        //Contruindo grid        if($NLinhas > 0)        {			            $Html .= $this->Tab->tabIni(null, null, 1, null, "tableGrid");             //Objeto de Converssão (Objeto Pastor :D)            $ObjC = $this->getObjetoConverte();            //Estilos de um resultado (ESTILO DE RESULTADO ÚNICO)            $ERU = $this->getCondicaoResultadoUnico();            $ETR = $this->getCondicaoTodosResultados();            while($Linha = @mysqli_fetch_array($Exec))            {                $I += 1;                 $ClassCor  = $I % 2 == 0 ? ConfigSIS::$CFG['CorZebraA'] : ConfigSIS::$CFG['CorZebraB'];                $CRT = "";                if(is_array($ETR))                {                    foreach ($ETR as $RT)                    {                        if($this->resultadoEval($Linha,array($RT[0])) === true) $CRT = $RT[1];	                    }                }                if($I == 1)                {                    $Html .= $this->tituloGridPadrao(true);                }                $Html .= $this->Tab->abreTr();                //Td de Checagem                if(parent::getModoImpressao() == false)                {                    $Html .= $this->tdCheck("SisReg[".$Linha[$Chave]."]","SisReg".$Linha[$Chave], $Linha[$Chave], $ClassCor." $CRT largCheck");                }                foreach($Listados as $Value)                {                    //Valor com possivel converssão                    $ValorItem = (!empty($ObjC[$Value])) ? $this->converteValor($Linha, $ObjC[$Value]) : $Linha[$Value];                    //Estilo de Resultado Único                    $CRU = "";                    if(!empty($ERU[$Value]))                    {                        if($this->resultadoEval($Linha,$ERU[$Value]) === true) $CRU = $ERU[$Value][1];                    }		                    //Formatação                    if(!empty($FormatarComo))                    {                        if(!empty($FormatarComo[$Value]))                        {                            $Como = strtoupper($FormatarComo[$Value]);                            switch ($Como)                            {                                case "DATA"    : $ValorItem = $FPHP->convertData($ValorItem);     break;                                case "DATAHORA": $ValorItem = $FPHP->convertDataHora($ValorItem); break;                                case "NUMERO"  : $ValorItem = $FPHP->floatCliente($ValorItem);    break;                                case "MOEDA"   : $ValorItem = $FPHP->moedaCliente($ValorItem);    break;                            }                        }                    }                    //Totalizadores                    if(!empty($Totalizador))                    {                        if(!empty($Totalizador[$Value]))                        {                            $ValorTotalizadores[$Value][] = $ValorItem;                        }                    }                    //Alinhamento                    $ClassAlinha = parent::getAlinhamento($Value);                    $Html .= $this->Tab->abreTd(null, "textoGrid $ClassCor $CRU $CRT $CSSL $ClassAlinha","",$Larguras[$Value]);                    $Html .= ($ValorItem == "") ? "&nbsp;" : $ValorItem;                    $Html .= $this->Tab->fechaTd();				                }                $Html .= $this->Tab->fechaTr();            }            /*Totalizadores da Grid*/            if(!empty($Totalizador))            {                $Html .= $this->Tab->abreTr("","sis_grid_totalizado");                //Td de Checagem                if(parent::getModoImpressao() == false)                {                    $Html .= $this->Tab->abreTd()."&nbsp;".$this->Tab->fechaTd();                }                foreach($Listados as $ItenListado)                {                    //Alinhamento                    $ClassAlinha = parent::getAlinhamento($ItenListado);                    $Html .= $this->Tab->abreTd(null,$ClassAlinha);                    $Html .= parent::processaTotalizador($Totalizador[$ItenListado], $ValorTotalizadores[$ItenListado]);                    $Html .= $this->Tab->fechaTd();                                    }                $Html .= $this->Tab->fechaTr();            }            $Html .= $this->Tab->tabFim();        }        else        {            return "<div class=\"semResultado\">&nbsp;Nenhum resultado encontrado.</div>";			        }        if(!empty($Paginado) or !empty($Totalizador))        {            $Resultado  = '<div class="classPaginacao">'.$Paginado.'</div>';            return $Resultado.$Html.$Resultado;        }        else        {                        return $Html;        }    }	    public function tdCheck($Nome, $Id, $Valor, $ClassCor)    {        return $this->Tab->abreTd('checkFill', $ClassCor).'<input type="checkbox" name="'.$Nome.'" id="'.$Id.'" value="'.$Valor.'" />'.$this->Tab->fechaTd();    }		}
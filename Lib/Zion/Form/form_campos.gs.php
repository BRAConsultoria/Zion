<?include_once($_SESSION['FMBase'].'formulario.class.php');include_once($_SESSION['FMBase'].'funcoes_php.class.php');class FormCamposGS extends Formulario {	    /**    *	Atributos da Classe    */    private $CampoRetorna,//Array que Guarda O retorno dos Campos            $ProcessarComo,            $Env,//Variavel que indica o envio do formulário            $Erro,//Variavel que guarda os erros de digitação;            $Filtro,            $ModFiltro;    private $BufferCFG = array(); //Buffer de Configurações    private $Op, $FPHP;    public function FormCamposGS()    {        $this->FPHP = new FuncoesPHP();    }        /*     * Seta a Maneira como o campo avulso deve ser processado     */    public function setProcessarComo($Nome, $ProcessarComo)    {        $this->ProcessarComo[$Nome] = $ProcessarComo;    }        //Erro    public function setErro($Nome, $Erro)    {        if($Erro != '')        {            if(is_array($this->Erro[$Nome]))            {                array_push($this->Erro[$Nome],$Erro);            }            else            {                $this->Erro[$Nome] = array($Erro);            }        }    }    //Erro    public function getErro()    {        return $this->Erro;    }    //Env    public function setEnv($Valor)    {        $Valor = strtolower($Valor);        if($Valor == "true")        {            $this->Env = true;        }        else        {            $this->Env = false;        }    }    //Env    public function getEnv()    {        return $this->Env;    }    /**    *	Cria uma mensagem de erro padrão    *	@param Nome String -  Nome do Campo    *	@return String    */    public function mensagemPadrao($Nome)    {        return ("ATENÇÃO: Ocorreu um erro ao processar $Nome.");    }    public function setOp($Valor)    {        $this->Op = $Valor;    }    public function getOp()    {        return $this->Op;    }    public function setModFiltro($Valor)    {        if(is_bool($Valor))        {            $this->ModFiltro = $Valor;        }        else        {            $this->ModFiltro = false;        }    }    public function getModFiltro()    {        return $this->ModFiltro;    }    //alias para setCampoRetorna    public function set($Nome, $Valor, $ProcessarComo = '')    {        $this->setCampoRetorna($Nome, $Valor, $ProcessarComo);    }    //Campo de Retorno    public function setCampoRetorna($Nome, $Valor, $ProcessarComo = '')    {        $this->CampoRetorna[$Nome] = $Valor;                if(empty($this->BufferCFG[$Nome]))        {            $this->setProcessarComo($Nome, $ProcessarComo);                        $CFG[$Nome] = array("Nome"=>$Nome, "Valor"=>$Valor, "ProcessarComo"=>$ProcessarComo);                        $this->setBufferCFG($CFG);        }    }    //Retorna o campo para o filtro    public function getCampoFiltro($Nome, $TipoCampo = "")    {        //verifica instacia        if(!is_object($this->FPHP)) $this->FPHP = new FuncoesPHP();        //Converte Tipo Campo        $TipoCampo = strtoupper($TipoCampo);                          //Retorna Vazio Caso o Campo não seja preechido        if('' == ''.$this->CampoRetorna[$Nome])        {            return "";        }                switch ($TipoCampo)        {            case "FLOAT":                return $this->FPHP->floatBanco($this->CampoRetorna[$Nome]);            break;            case "DATA":                return $this->FPHP->convertData($this->CampoRetorna[$Nome]);            break;            case "DATAHORA":                return $this->FPHP->convertDataHora($this->CampoRetorna[$Nome]);            break;            default: return $this->CampoRetorna[$Nome];        }    }    //Alias Para Filtro    public function getF($Nome, $TipoCampo = "")    {        return $this->getCampoFiltro($Nome, $TipoCampo);    }    //alias para getCampoRetorna    public function get($Nome, $Null = false, $TipoCampo = "")    {        return $this->getCampoRetorna($Nome, $Null, $TipoCampo);    }    //Campo de Retorno    public function getCampoRetorna($Nome, $Null = false, $TipoCampo = "")    {        //verifica instacia        if(!is_object($this->FPHP)) $this->FPHP = new FuncoesPHP();        //Converte Tipo Campo        $TipoCampo = strtoupper($TipoCampo);                if(empty($TipoCampo))        {            $TipoCampo = strtoupper($this->ProcessarComo[$Nome]);        }              switch ($TipoCampo)        {            case "TEXTO":                $Valor = $this->CampoRetorna[$Nome];                return ($Null === true) ? $this->FPHP->nullReturn($Valor,true) : "'".$Valor."'";            break;            case "INTEIRO":                $Valor = $this->CampoRetorna[$Nome];                return ($Null === true) ? $this->FPHP->nullReturn($Valor,false) : $Valor;            break;            case "TEXTOINTEIRO":                $Valor = $this->CampoRetorna[$Nome];                                if(is_numeric($Valor))                return ($Null === true) ? $this->FPHP->nullReturn($Valor,false) : $Valor;                else                return ($Null === true) ? $this->FPHP->nullReturn($Valor,true) : "'".$Valor."'";            break;            case "FLOAT":                $Valor = $this->FPHP->floatBanco($this->CampoRetorna[$Nome]);                return ($Null === true) ? $this->FPHP->nullReturn($Valor,false) : $Valor;            break;            case "DATA":                if($this->dataMenor1900($this->CampoRetorna[$Nome]))                {                    list($Dia,$Mes,$Ano) = explode("/",$this->CampoRetorna[$Nome]);                                        $Valor = $Ano."/".$Mes."/".$Dia;                                        return ($Null === true) ? $this->FPHP->nullReturn($Valor,true) : "'".$Valor."'";                }                else                {                    $Valor = $this->FPHP->convertData(@$this->CampoRetorna[$Nome]);                    return ($Null === true) ? $this->FPHP->nullReturn($Valor,true) : "'".$Valor."'";                }            break;            case "DATAHORA":                $Valor = $this->FPHP->convertDataHora($this->CampoRetorna[$Nome]);                return ($Null === true) ? $this->FPHP->nullReturn($Valor) : "'".$Valor."'";            break;            default: return $this->CampoRetorna[$Nome];        }    }    public function setFiltro($Ativo,$Identificacao,$Campo,$Possicao)    {        $this->Filtro[] = array($Ativo,$Identificacao,$Campo,$Possicao);    }    public function getFiltro()    {        return $this->Filtro;    }    public function resetFiltro()    {        unset($this->Filtro);    }    public function setBufferCFG($CFG)    {        if(is_array($CFG['Nome']) or is_bool($CFG['Nome'])) return;                $this->BufferCFG[$CFG['Nome']] = $CFG;    }    public function getBufferCFG($Posicao = '')    {        return ($Posicao != "") ? $this->BufferCFG[$Posicao] : $this->BufferCFG;    }        private function dataMenor1900($Data)     {        $FPHP = new FuncoesPHP();                if(empty($Data)) return false;                 if(strlen($Data) <> 10) throw new Exception("Data Inválida!");                           list($Dia,$Mes,$Ano) = explode("/",$Data);                  if($Ano >= 1900)         {                             return false;         }         else         {             return (bool)($FPHP->verificaData($Dia.'/'.$Mes.'/'.date('Y')));                      }     }}
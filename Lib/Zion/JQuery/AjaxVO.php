<?php/** * \Zion\JQuery\AjaxVO() *  * @author Pablo Vanni * @copyright 2014 * @version 2014 * @access public */ namespace Zion\JQuery;class AjaxVO{     private $url;    private $accepts;    private $async;    private $beforeSend;    private $cache;    private $complete;    private $contents;    private $contentType;    private $context;    private $crossDomain;    private $data;    private $dataFilter;    private $dataType;    private $error;    private $global;    private $headers;    private $ifModified;    private $isLocal;    private $jsonp;    private $jsonpCallback;    private $mimeType;    private $password;    private $processData;    private $scriptCharset;    private $statusCode;    private $success;    private $timeout;    private $traditional;    private $username;    private $done;    private $fail;    private $always;        private $funcao;        private $objAjax;        public function __construct($obj)    {        $this->objAjax = $obj;    }    /**     * Cria a String de acordo com a configuração informada aos metodos     * @return string     */    public function criar()    {        return $this->objAjax->criar();    }    public function getUrl()    {        return $this->url;    }    public function setUrl($url)    {        if(!is_null($url)){            $this->url = $url;            return $this;        } else {            throw new JqueryException("url: Nenhum valor informado");        }    }    public function getAccepts()    {        return $this->accepts;    }    public function setAccepts($accepts)    {        if(!is_null($accepts)){            $this->accepts = $accepts;            return $this;        } else {            throw new JqueryException("accepts: Nenhum valor informado");        }    }    public function getAsync()    {        return $this->async;    }    /**     * AjaxVO::setAsync()     *      * @param mixed $async     * @return     */    public function setAsync($async)    {        if(strtolower($async) == "true" or strtolower($async) == "false"){            $this->async = $async;            return $this;        } else {            throw new JqueryException("async: Voce deve informar true ou false.");        }    }    /**     * AjaxVO::getBeforeSend()     *      * @return     */    public function getBeforeSend()    {        return $this->beforeSend;    }    /**     * AjaxVO::setBeforeSend()     *      * @param mixed $beforeSend     * @return     */    public function setBeforeSend($beforeSend)    {        if(!is_null($beforeSend)){            $this->beforeSend = $beforeSend;            return $this;        } else {            throw new JqueryException("beforeSend: Nenhum valor informado.");        }    }    /**     * AjaxVO::getCache()     *      * @return     */    public function getCache()    {        return $this->cache;    }    /**     * AjaxVO::setCache()     *      * @param mixed $cache     * @return     */    public function setCache($cache)    {        if(strtolower($cache) == "true" or strtolower($cache) == "false"){            $this->cache = $cache;            return $this;        } else {            throw new JqueryException("cache: Voce deve informar true ou false.");        }    }    /**     * AjaxVO::getComplete()     *      * @return     */    public function getComplete()    {        return $this->complete;    }    /**     * AjaxVO::setComplete()     *      * @param mixed $complete     * @return     */    public function setComplete($complete)    {        if(!is_null($complete)){            $this->complete = $complete;            return $this;        } else {            throw new JqueryException("complete: Nenhum valor informado.");        }    }    /**     * AjaxVO::getContents()     *      * @return     */    public function getContents()    {        return $this->contents;    }    /**     * AjaxVO::setContents()     *      * @param mixed $contents     * @return     */    public function setContents($contents)    {        if(!is_null($contents)){            $this->contents = $contents;            return $this;        } else {            throw new JqueryException("contents: Nenhum valor informado.");        }    }    /**     * AjaxVO::getContentType()     *      * @return     */    public function getContentType()    {        return $this->contentType;    }    /**     * AjaxVO::setContentType()     *      * @param mixed $contentType     * @return     */    public function setContentType($contentType)    {        if(!is_null($contentType)){            $this->contentType = $contentType;            return $this;        } else {            throw new JqueryException("contentType: Nenhum valor informado.");        }    }    /**     * AjaxVO::getContext()     *      * @return     */    public function getContext()    {        return $this->context;    }    /**     * AjaxVO::setContext()     *      * @param mixed $context     * @return     */    public function setContext($context)    {        if(!is_null($context)){            $this->context = $context;            return $this;        } else {            throw new JqueryException("context: Nenhum valor informado.");        }    }    /**     * AjaxVO::getCrossDomain()     *      * @return     */    public function getCrossDomain()    {        return $this->crossDomain;    }    /**     * AjaxVO::setCrossDomain()     *      * @param mixed $crossDomain     * @return     */    public function setCrossDomain($crossDomain)    {        if(strtolower($crossDomain) == "true" or strtolower($crossDomain) == "false"){            $this->crossDomain = $crossDomain;            return $this;        } else {            throw new JqueryException("crossDomain: Voce deve informar true ou false.");        }    }    /**     * AjaxVO::getData()     *      * @return     */    public function getData()    {        return $this->data;    }    /**     * AjaxVO::setData()     *      * @param mixed $data     * @return     */    public function setData($data)    {        if(!is_null($data)){            $this->data = $data;            return $this;        } else {            throw new JqueryException("data: Nenhum valor informado.");        }    }    /**     * AjaxVO::getDataFilter()     *      * @return     */    public function getDataFilter()    {        return $this->dataFilter;    }    /**     * AjaxVO::setDataFilter()     *      * @param mixed $dataFilter     * @return     */    public function setDataFilter($dataFilter)    {        if(!is_null($dataFilter)){            $this->dataFilter = $dataFilter;            return $this;        } else {            throw new JqueryException("dataFilter: Nenhum valor informado.");        }    }    /**     * AjaxVO::getDataType()     *      * @return     */    public function getDataType()    {        return $this->dataType;    }    /**     * AjaxVO::setDataType()     *      * @param mixed $dataType     * @return     */    public function setDataType($dataType)    {        if(strtolower($dataType) == "xml" or strtolower($dataType) == "json" or strtolower($dataType) == "script" or strtolower($dataType) == "html"){            $this->dataType = $dataType;            return $this;        } else {            throw new JqueryException("crossDomain: Voce deve informar xml, json, script, or html.");        }    }    /**     * AjaxVO::getError()     *      * @return     */    public function getError()    {        return $this->error;    }    /**     * AjaxVO::setError()     *      * @param mixed $error     * @return     */    public function setError($error)    {        if(!is_null($error)){            $this->error = $error;            return $this;        } else {            throw new JqueryException("error: Nenhum valor informado.");        }    }    /**     * AjaxVO::getGlobal()     *      * @return     */    public function getGlobal()    {        return $this->global;    }    /**     * AjaxVO::setGlobal()     *      * @param mixed $global     * @return     */    public function setGlobal($global)    {        if(strtolower($global) == "true" or strtolower($global) == "false"){            $this->global = $global;            return $this;        } else {            throw new JqueryException("global: Voce deve informar true ou false.");        }    }    /**     * AjaxVO::getHeaders()     *      * @return     */    public function getHeaders()    {        return $this->headers;    }    /**     * AjaxVO::setHeaders()     *      * @param mixed $headers     * @return     */    public function setHeaders($headers)    {        if(!is_null($headers)){            $this->headers = $headers;            return $this;        } else {            throw new JqueryException("headers: Nenhum valor informado.");        }    }    /**     * AjaxVO::getIfModified()     *      * @return     */    public function getIfModified()    {        return $this->ifModified;    }    /**     * AjaxVO::setIfModified()     *      * @param mixed $ifModified     * @return     */    public function setIfModified($ifModified)    {        if(strtolower($ifModified) == "true" or strtolower($ifModified) == "false"){            $this->ifModified = $ifModified;            return $this;        } else {            throw new JqueryException("ifModified: Voce deve informar true ou false.");        }    }    /**     * AjaxVO::getIsLocal()     *      * @return     */    public function getIsLocal()    {        return $this->isLocal;    }    /**     * AjaxVO::setIsLocal()     *      * @param mixed $isLocal     * @return     */    public function setIsLocal($isLocal)    {        if(strtolower($isLocal) == "true" or strtolower($isLocal) == "false"){            $this->isLocal = $isLocal;            return $this;        } else {            throw new JqueryException("isLocal: Voce deve informar true ou false.");        }    }    /**     * AjaxVO::getJsonp()     *      * @return     */    public function getJsonp()    {        return $this->jsonp;    }    /**     * AjaxVO::setJsonp()     *      * @param mixed $jsonp     * @return     */    public function setJsonp($jsonp)    {        if(!is_null($jsonp)){            $this->jsonp = $jsonp;            return $this;        } else {            throw new JqueryException("jsonp: Nenhum valor informado.");        }    }    /**     * AjaxVO::getJsonpCallback()     *      * @return     */    public function getJsonpCallback()    {        return $this->jsonpCallback;    }    /**     * AjaxVO::setJsonpCallback()     *      * @param mixed $jsonpCallback     * @return     */    public function setJsonpCallback($jsonpCallback)    {        if(!is_null($jsonpCallback)){            $this->jsonpCallback = $jsonpCallback;            return $this;        } else {            throw new JqueryException("jsonpCallback: Nenhum valor informado.");        }    }    /**     * AjaxVO::getMimeType()     *      * @return     */    public function getMimeType()    {        return $this->mimeType;    }    /**     * AjaxVO::setMimeType()     *      * @param mixed $mimeType     * @return     */    public function setMimeType($mimeType)    {        if(!is_null($mimeType)){            $this->mimeType = $mimeType;            return $this;        } else {            throw new JqueryException("mimeType: Nenhum valor informado.");        }    }    /**     * AjaxVO::getPassword()     *      * @return     */    public function getPassword()    {        return $this->password;    }    /**     * AjaxVO::setPassword()     *      * @param mixed $password     * @return     */    public function setPassword($password)    {        if(!is_null($password)){            $this->password = $password;            return $this;        } else {            throw new JqueryException("password: Nenhum valor informado.");        }    }    /**     * AjaxVO::getProcessData()     *      * @return     */    public function getProcessData()    {        return $this->processData;    }    /**     * AjaxVO::setProcessData()     *      * @param mixed $processData     * @return     */    public function setProcessData($processData)    {        if(strtolower($processData) == "true" or strtolower($processData) == "false"){            $this->processData = $processData;            return $this;        } else {            throw new JqueryException("processData: Voce deve informar true ou false.");        }    }    /**     * AjaxVO::getScript()     *      * @return     */    public function getScript()    {        return $this->script;    }    /**     * AjaxVO::setScript()     *      * @param mixed $script     * @return     */    public function setScript($script)    {        if(!is_null($script)){            $this->script = $script;            return $this;        } else {            throw new JqueryException("script: Nenhum valor informado.");        }    }    /**     * AjaxVO::getScriptCharset()     *      * @return     */    public function getScriptCharset()    {        return $this->scriptCharset;    }    /**     * AjaxVO::setScriptCharset()     *      * @param mixed $scriptCharset     * @return     */    public function setScriptCharset($scriptCharset)    {        if(!is_null($scriptCharset)){            $this->scriptCharset = $scriptCharset;            return $this;        } else {            throw new JqueryException("scriptCharset: Nenhum valor informado.");        }    }    /**     * AjaxVO::getStatusCode()     *      * @return     */    public function getStatusCode()    {        return $this->statusCode;    }    /**     * AjaxVO::setStatusCode()     *      * @param mixed $statusCode     * @return     */    public function setStatusCode($statusCode)    {        if(!is_null($statusCode)){            $this->statusCode = $statusCode;            return $this;        } else {            throw new JqueryException("statusCode: Nenhum valor informado.");        }    }    /**     * AjaxVO::getSuccess()     *      * @return     */    public function getSuccess()    {        return $this->success;    }    /**     * AjaxVO::setSuccess()     *      * @param mixed $success     * @return     */    public function setSuccess($success)    {        if(!is_null($success)){            $this->success = $success;            return $this;        } else {            throw new JqueryException("success: Nenhum valor informado.");        }    }    /**     * AjaxVO::getTimeout()     *      * @return     */    public function getTimeout()    {        return $this->timeout;    }    /**     * AjaxVO::setTimeout()     *      * @param mixed $timeout     * @return     */    public function setTimeout($timeout)    {        if(is_numeric($timeout)){            $this->timeout = $timeout;            return $this;        } else {            throw new JqueryException("timeout: O valor informado nao e numerico.");        }    }    /**     * AjaxVO::getTraditional()     *      * @return     */    public function getTraditional()    {        return $this->traditional;    }    /**     * AjaxVO::setTraditional()     *      * @param mixed $traditional     * @return     */    public function setTraditional($traditional)    {        if(strtolower($traditional) == "true" or strtolower($traditional) == "false"){            $this->traditional = $traditional;            return $this;        } else {            throw new JqueryException("traditional: Voce deve informar true ou false.");        }    }    /**     * AjaxVO::getUsername()     *      * @return     */    public function getUsername()    {        return $this->username;    }    /**     * AjaxVO::setUsername()     *      * @param mixed $username     * @return     */    public function setUsername($username)    {        if(!is_null($username)){            $this->username = $username;            return $this;        } else {            throw new JqueryException("username: Nenhum valor informado.");        }    }    /**     * AjaxVO::getDone()     *      * @return     */    public function getDone()    {        return $this->done;    }    /**     * AjaxVO::setDone()     *      * @param mixed $done     * @return     */    public function setDone($done)    {        if(!is_null($done)){            $this->done = $done;            return $this;        } else {            throw new JqueryException("done: Nenhum valor informado.");        }    }    /**     * AjaxVO::getFail()     *      * @return     */    public function getFail()    {        return $this->fail;    }    /**     * AjaxVO::setFail()     *      * @param mixed $fail     * @return     */    public function setFail($fail)    {        if(!is_null($fail)){            $this->fail = $fail;            return $this;        } else {            throw new JqueryException("fail: Nenhum valor informado.");        }    }    /**     * AjaxVO::getAlways()     *      * @return     */    public function getAlways()    {        return $this->always;    }    /**     * AjaxVO::setAlways()     *      * @param mixed $always     * @return     */    public function setAlways($always)    {        if(!is_null($always)){            $this->always = $always;            return $this;        } else {            throw new JqueryException("always: Nenhum valor informado.");        }    }        /**     * AjaxVO::getFuncao()     *      * @return     */    public function getFuncao()    {        return $this->funcao;    }    /**     * AjaxVO::setFuncao()     *      * @param mixed $funcao     * @return     */    public function setFuncao($funcao)    {        if(!is_null($funcao)){            $this->funcao = $funcao;            return $this;        } else {            throw new JqueryException("funcao: Nenhum valor informado.");        }    }}
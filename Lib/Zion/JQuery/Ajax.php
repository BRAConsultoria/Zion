<?php/** * \Zion\JQuery\Ajax() *  * @author The Sappiens Team * @copyright 2014 * @version 2014 * @access public */namespace Zion\JQuery;class Ajax{    private $config;    private $type;    private $definicoes;    private $complementos;    /**     * Ajax::__construct()     *      * @return     */    public function __construct()    {        $this->definicoes = [            'url',            'accepts',            'async',            'beforeSend',            'cache',            'complete',            'contents',            'contentType',            'context',            'crossDomain',            'data',            'dataFilter',            'dataType',            'error',            'global',            'headers',            'ifModified',            'isLocal',            'jsonp',            'jsonpCallback',            'mimeType',            'password',            'processData',            'scriptCharset',            'statusCode',            'success',            'timeout',            'traditional',            'username'        ];        $this->complementos = [            'done',            'fail',            'always'        ];    }    /**     * Ajax::get()     *      * @return AjaxVO     */    public function get()    {        $this->type = 'get';        $this->config = new AjaxVO($this);        return $this->config;    }    /**     * Ajax::getJSON()     *      * @return AjaxVO     */    public function getJSON()    {        $this->type = 'get';        $this->config = new AjaxVO($this);                $this->config->setDataType('json');        return $this->config;    }    /**     * Ajax::getScript()     *      * @return     */    public function getScript()    {        $this->type = 'post';        $this->config = new AjaxVO($this);        $this->config->setDataType('script');        return $this->config;    }    /**     * Ajax::post()     *      * @return AjaxVO     */    public function post()    {        $this->type = 'post';        $this->config = new AjaxVO($this);        return $this->config;    }    /**     * Ajax::load()     *      * @param mixed $container     * @param mixed $url     * @param string $funcaoAoCompletar     * @return     */    public function load($container, $url, $funcaoAoCompletar = '')    {        $aoCompletar = $funcaoAoCompletar ? ',' . $funcaoAoCompletar : '';        return ' $("#' . $container . '").load("' . $url . $aoCompletar . '"); ';    }    /**     * Ajax::criar()     *      * @return     */    public function criar()    {        $arrayConf = [            'definicoes' => [],            'complementos' => []];        $semAspas = ['data', 'beforeSend', 'error'];        $arrayConf['definicoes'][] = 'type:"' . $this->type . '"';        foreach ($this->definicoes as $nomeDefinicao) {            $metodo = 'get' . $nomeDefinicao;            $conteudoGet = $this->config->{$metodo}();            if ($conteudoGet) {                                if (in_array($nomeDefinicao, $semAspas)) {                    $arrayConf['definicoes'][] = $nomeDefinicao . ':' . $conteudoGet;                } else {                    $arrayConf['definicoes'][] = $nomeDefinicao . ':"' . $conteudoGet . '"';                }            }        }        foreach ($this->complementos as $nomeComplemento) {            $metodo = 'get' . $nomeComplemento;            $conteudoGet = $this->config->{$metodo}();            if ($conteudoGet) {                $arrayConf['complementos'][] = '.' . $nomeComplemento . '(function(ret) {' . $conteudoGet . '})';            }        }        $strAjax1 = ' $.ajax({ ' . implode(', ', $arrayConf['definicoes']) . ' })';        $strAjax2 = implode('', $arrayConf['complementos']) . '; ';        $funcao = $this->config->getFuncao();        if ($funcao) {            $final = ' function ' . str_ireplace(['{', '}', 'function'], '', $funcao) . '{' . $strAjax1 . $strAjax2 . ' } ';        } else {            $final = $strAjax1 . $strAjax2;        }        //Renova a Instancia de VO        $this->config = new AjaxVO($this);        return $final;    }}
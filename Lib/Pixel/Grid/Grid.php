<?php/****    Sappiens Framework*    Copyright (C) 2014, BRA Consultoria**    Website do autor: www.braconsultoria.com.br/sappiens*    Email do autor: sappiens@braconsultoria.com.br**    Website do projeto, equipe e documentação: www.sappiens.com.br*   *    Este programa é software livre; você pode redistribuí-lo e/ou*    modificá-lo sob os termos da Licença Pública Geral GNU, conforme*    publicada pela Free Software Foundation, versão 2.**    Este programa é distribuído na expectativa de ser útil, mas SEM*    QUALQUER GARANTIA; sem mesmo a garantia implícita de*    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM*    PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais*    detalhes.* *    Você deve ter recebido uma cópia da Licença Pública Geral GNU*    junto com este programa; se não, escreva para a Free Software*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA*    02111-1307, USA.**    Cópias da licença disponíveis em /Sappiens/_doc/licenca**//** *   @author Pablo Vanni - pablovanni@gmail.com *   @since 18/11/2005 *   Última Atualização: 13/10/2014 *   Atualizada Por: Pablo Vanni - pablovanni@gmail.com *   @name Cria uma grid de resultados com paginação */namespace Pixel\Grid;class Grid extends GridVO{    private $meusDadosConverte;    public function __construct()    {        parent::__construct();    }    /**     * Cria uma instrução em html com um link de ordenação     * @param string $campoDescricao     * @param string $campoTb     * @return string     */    public function ordena($campoDescricao, $campoTb)    {        $html = new \Zion\Layout\Html();        $quemOrdena = parent::getQuemOrdena();        $metodoFiltra = parent::getMetodoFiltra();        $paginaAtual = parent::getPaginaAtual();        $naoOrdenePor = parent::getNaoOrdenePor();        //Iniciar ordenando Ascendente         $tipoOrdenacao = (empty(\filter_input(\INPUT_GET, 'to'))) ? 'ASC' : parent::getTipoOrdenacao();        //Verifica Se o Não Permite Ordenação        if (\in_array($campoTb, $naoOrdenePor)) {            return sprintf('<span>%s</span>', $campoDescricao);        }        $img = '';        if ($campoTb == $quemOrdena) {            if ($tipoOrdenacao == "DESC") {                $novoTipo = "ASC";                $img = $html->abreTagFechada('i', ['class' => 'fa fa-sort-alpha-desc alinD recE10px']);            } else {                $novoTipo = "DESC";                $img = $html->abreTagFechada('i', ['class' => 'fa fa-sort-alpha-asc alinD recE10px']);            }            //Seta Quem ordena            \Zion\Paginacao\Parametros::setParametros("Full", ["qo" => $campoTb, "pa" => $paginaAtual]);            //Muda o Tipo de Ordenação do Link            $qS = \Zion\Paginacao\Parametros::addQueryString(\Zion\Paginacao\Parametros::getQueryString(), ["to" => $novoTipo]);        } else {            //Seta quem ordena e o tipo de ordenacao            \Zion\Paginacao\Parametros::setParametros("Full", ["qo" => $campoTb, "to" => $tipoOrdenacao, "pa" => $paginaAtual]);            //Recupera QS            $qS = \Zion\Paginacao\Parametros::getQueryString();        }        //Ordenação        if (!empty($novoTipo)) {            $tipoOrdenacao = $novoTipo;        }        //Imagem de Ordenação        $iOr = $html->abreTagFechada('i', ['class' => 'fa fa-sort recD5px']);        return '<a class="branco hand" nohref onclick="sisSvo(\'' . $campoTb . '\',\' ' . $tipoOrdenacao . '\'); ' . $metodoFiltra . '(\'' . $qS . '\');" >' . $iOr . $campoDescricao . $img . '</a>';    }    public function converteValor($linha, $dadosConverte)    {        $getDadosConverte = (\is_array($dadosConverte) ? $dadosConverte : $this->meusDadosConverte);        $objeto = $dadosConverte[0]; //Esta sendo exucutada pelo eval        $metodo = $dadosConverte[1];        $campo = $dadosConverte[2];        $pI = (empty($getDadosConverte[3])) ? array() : $getDadosConverte[3];        $pE = (empty($getDadosConverte[4])) ? array() : $getDadosConverte[4];        $ordem = $dadosConverte[5];        if (!empty($pI)) {            foreach ($pI as $valor) {                $arrayPI[] = $linha[$valor];            }        }        if ($ordem == "IE") {            $arParametros = (empty($arrayPI)) ? $pE : \array_merge($arrayPI, $pE);        } else {            $arParametros = (empty($arrayPI)) ? $pE : \array_merge($pE, $arrayPI);        }        if (!\is_array($arParametros)) {            return $linha[$campo];        } else {            $parametros = '';            foreach ($arParametros as $valores) {                $parametros .= "'" . $valores . "',";            }            $parametrosSeparados = \substr($parametros, 0, -1);            eval('$retorno = $objeto->' . $metodo . '(' . $parametrosSeparados . ');');            return $retorno;        }    }    public function resultadoEval($linha, $evalCod)    {        eval($evalCod[0]);        return $r;    }    public function setMeusDadosConverte($dadosConverte)    {        $this->meusDadosConverte = $dadosConverte;    }}
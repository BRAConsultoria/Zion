<?php/****    Sappiens Framework*    Copyright (C) 2014, BRA Consultoria**    Website do autor: www.braconsultoria.com.br/sappiens*    Email do autor: sappiens@braconsultoria.com.br**    Website do projeto, equipe e documentação: www.sappiens.com.br*   *    Este programa é software livre; você pode redistribuí-lo e/ou*    modificá-lo sob os termos da Licença Pública Geral GNU, conforme*    publicada pela Free Software Foundation, versão 2.**    Este programa é distribuído na expectativa de ser útil, mas SEM*    QUALQUER GARANTIA; sem mesmo a garantia implícita de*    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM*    PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais*    detalhes.* *    Você deve ter recebido uma cópia da Licença Pública Geral GNU*    junto com este programa; se não, escreva para a Free Software*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA*    02111-1307, USA.**    Cópias da licença disponíveis em /Sappiens/_doc/licenca**//** *   @author Pablo Vanni - pablovanni@gmail.com *   @since 18/11/2005 *   Última Atualização: 13/10/2014 *   Atualizada Por: Pablo Vanni - pablovanni@gmail.com *   Última Atualização: 26/01/2015 *   Atualizada Por: Feliphe "O Retaliador" Bueno - feliphezion@gmail.com *   @name Cria uma grid de resultados com paginação */namespace Pixel\Grid;class GridPadrao extends Grid{    private $con;    private $paginacao;    private $html;    private $botoes;    private $modoImpressao;    /**     * Contrutor privado inpedindo a classe de ser instanciada de forma publica     * @param \Zion\Banco\Conexao $con     */    public function __construct(\Zion\Banco\Conexao $con = NULL)    {        parent::__construct();        $this->con = (!\is_object($con)) ? \Zion\Banco\Conexao::conectar() : $this->con = $con;        $this->paginacao = new \Pixel\Paginacao\Paginacao($con);        $this->html = new \Zion\Layout\Html();        $this->botoes = new GridBotoes();        $this->setSelecaoMultipla(true);        //Padrões Iniciais        parent::setTipoOrdenacao(\filter_input(\INPUT_GET, 'to'));        parent::setQuemOrdena(\filter_input(\INPUT_GET, 'qo'));        parent::setPaginaAtual(\filter_input(\INPUT_GET, 'pa'));        parent::setQLinhas(SIS_LINHAS_GRID);            }    public function tituloGridPadrao()    {        $colunas = parent::getColunas();        $selecao = parent::getSelecao();        $html = $this->html->abreTagAberta('thead');        $html .= $this->html->abreTagAberta('tr');        if ($selecao === true) {            $html .= $this->html->abreTagFechada('th');        }        //Titulos        foreach ($colunas as $coluna => $titulo) {            $classAlinha = parent::getAlinhamento($coluna);            $html .= $this->html->abreTagAberta('th', ['class' => $classAlinha]);            $html .= parent::ordena($titulo, $coluna);            $html .= $this->html->fechaTag('th');        }        $html .= $this->html->fechaTag('tr');        $html .= $this->html->fechaTag('thead');        return $html;    }    /**     * 	Contrução da Grid de Dados     * 	@param Opcoes Array - Indica se cada item deve ser habilitado     * 	@param QLinhas Inteiro - Número de Resultados por pagina     * 	@param PaginaAtual Inteiro - Número da Pagina Atual     * 	@param Parametros String - Query String com parametros nescessarios      * 	@return String     */    public function montaGridPadrao()    {        //Modo de impressão        $this->modoImpressao = false;        if (\filter_input(\INPUT_GET, 'sisModoImpressao')) {            $this->modoImpressao = true;            parent::setQLinhas(0);            $this->setSelecao(false);        }                //Recupera Valores        $sql = parent::getSql();        $tabelaMestra = parent::getTabelaMestra();        $sqlContador = parent::getSqlContador();        $filtroAtivo = parent::getFiltroAtivo();        $limitAtivo = parent::getLimitAtivo();        $listados = array_keys(parent::getColunas());        $chave = parent::getChave();        $formatarComo = parent::getFormatarComo();        $selecao = parent::getSelecao();        $qLinhas = parent::getQLinhas();        $this->paginacao->setSql($sql);        //Verifica se o SQL não esta Vazio        if (empty($sql)) {            throw new \Exception("Valor selecionado inválido!");        }        //Se Formatações existem, intancie funções de Validação        if (!empty($formatarComo)) {            $fPHP = \Zion\Validacao\Valida::instancia();        }        //Iniciando valores        $i = 0;        $html = "";                //Monta Paginanação        if ($qLinhas > 0) {            //Setando Valores para paginação            $this->paginacao->setTabelaMestra($tabelaMestra);            $this->paginacao->setSqlContador($sqlContador);            $this->paginacao->setFiltroAtivo($filtroAtivo);            $this->paginacao->setLimitAtivo($limitAtivo);            $this->paginacao->setChave($chave);            $this->paginacao->setQLinhas($qLinhas);            $this->paginacao->setPaginaAtual(parent::getPaginaAtual());            $this->paginacao->setTipoOrdenacao(parent::getTipoOrdenacao());            $this->paginacao->setQuemOrdena(parent::getQuemOrdena());            $this->paginacao->setMetodoFiltra(parent::getMetodoFiltra());            $this->paginacao->setAlterarLinhas(parent::getAlterarLinhas());            $rs = $this->paginacao->rsPaginado();        } else {            if (\is_string($sql)) {                $rs = $this->con->executar($sql);            } else {                $rs = $sql->execute();            }        }        $nLinhas = $this->con->nLinhas($rs);        //Contruindo grid        if ($nLinhas > 0) {            //$html .= '<!-- starts: sisContainerGrid (opened by class GridBotoes) -->';            //$html .= $this->html->abreTagAberta('div', ['id' => 'sisContainerGrid']);                $html.= '<form name="formGrid" id="formGrid">';            $html .= $this->html->abreTagAberta('div', ['id' => 'sisContainerPaginacao', 'class' => 'clearfix', 'style' => 'position:absolute; right:0; top:0;']);            $html .= $this->paginacao->listaResultados();            $html .= $this->html->fechaTag('div');            $html .= $this->html->abreTagAberta('div', ['id' => 'sisGridControl']);            $html .= $this->html->abreTagAberta('div', ['class' => 'table-primary']);            //$html .= $this->getFilters('Aqui vem os filtros');            $html .= $this->html->abreTagAberta('table', ['class' => 'table table-bordered']);            //Atributo de substituicao            $subs = $this->getSubstituirPor();            //Objeto de Converssão (Objeto Pastor :D)            $objC = $this->getObjetoConverte();            //Estilos de um resultado (ESTILO DE RESULTADO ÚNICO)            $eRU = $this->getCondicaoResultadoUnico();            $eTR = $this->getCondicaoTodosResultados();            while ($linha = $rs->fetch()) {                $i += 1;                $cRT = "";                if (is_array($eTR)) {                    foreach ($eTR as $rT) {                        if ($this->resultadoEval($linha, array($rT[0])) === true) {                            $cRT = $rT[1];                        }                    }                }                if ($i == 1) {                    $html .= $this->tituloGridPadrao();                }                $html .= $this->html->abreTagAberta('tbody');                $html .= $this->html->abreTagAberta('tr');                if ($selecao === true) {                    //exit($chave);                    $html .= $this->thCheck($linha[$chave]);                }                foreach ($listados as $value) {                                                            //Valor com possivel converssão                    if (\is_array($objC) and \key_exists($value, $objC)) {                        $valorItem = $this->converteValor($linha, $objC[$value]);                    } else {                        $valorItem = $linha[$value];                    }                    //Formatação                    if (!empty($formatarComo)) {                        if (array_key_exists($value, $formatarComo)) {                            $como = strtoupper($formatarComo[$value]);                            switch ($como) {                                case "DATA" : $valorItem = $fPHP->data()->converteData($valorItem);                                    break;                                case "DATAHORA": $valorItem = $fPHP->data()->converteDataHora($valorItem);                                    break;                                case "NUMERO" : $valorItem = $fPHP->numero()->floatCliente($valorItem);                                    break;                                case "MOEDA" : $valorItem = $fPHP->numero()->moedaCliente($valorItem);                                    break;                            }                        }                    }                                        //Valor com possível substituicao                    if (\is_array($subs) and \key_exists($value, $subs)) {                        if (\key_exists($valorItem, $subs[$value])) {                            $valorItem = $subs[$value][$valorItem];                        } else {                            if ($valorItem == '') {                                $valorItem = \current($subs[$value]);                            }                        }                    }                    //Estilo de Resultado Único                    $cRU = "";                    if (\is_array($eRU) and \key_exists($value, $eRU)) {                        if ($this->resultadoEval($linha, $eRU[$value]) === true) {                            $cRU = $eRU[$value][1];                        }                    }                    //Alinhamento                    $classAlinha = parent::getAlinhamento($value);                    $html .= $this->html->abreTagAberta('td', ['class' => $classAlinha]);                    $html .= ($valorItem == "") ? "&nbsp;" : $valorItem;                    $html .= $this->html->fechaTag('td');                }                $html .= $this->html->fechaTag('tr');                $html .= $this->html->fechaTag('tbody');            }            $html .= $this->html->fechaTag('table');            $html .= $this->html->fechaTag('div');            //$html .= '<!-- ends: grid-control -->';            $html .= $this->html->fechaTag('div');            //$html .= $this->html->fechaTag('div');            //$html .= '<!-- ends: sisContainerGrid (opened by class GridBotoes) -->';             $html .= '</form>';        } else {            $html .= $this->html->abreTagAberta('div', ['id' => 'sisContainerPaginacao', 'class' => 'clearfix']);            $html .= $this->html->fechaTag('div');            $html .= $this->html->abreTagAberta('div', ['id' => 'sisGridControl']);            $html .= $this->html->abreTagAberta('div', ['class' => 'table-primary']);            //$html .= $this->getFilters('Aqui vem os filtros');            $html .= $this->html->fechaTag('div');            $html .= $this->html->fechaTag('div');            $html .= $this->html->abreTagAberta('div', ['class' => 'table-footer alinD']);            $html .= $this->html->abreTagFechada('i', ['class' => 'fa fa-frown-o']);            $html .= $this->html->entreTags('em', 'Oops! Nenhum resultado encontrado...');            $html .= $this->html->fechaTag('div');            return $html;        }        return $html . $this->paginacao->getResultado();    }    public function getFilters($filtros)    {        $template = new \Pixel\Template\Template();        $html = '';        $html .= $template->getPanel('box-filters', 'Filtros especiais', $filtros, ['visible' => 'hidden', 'iconTitle' => 'fa fa-filter']);        return $html;    }    public function thCheck($cod)    {        if (parent::getSelecaoMultipla() === true) {            $type = 'checkbox';            $name = 'sisReg[]';        } else {            $type = 'radio';            $name = 'sisReg';        }        $id = 'sisReg' . $cod;        return $this->html->abreTagAberta('td', ['class' => 'l45px']) .                $this->html->abreTagAberta('label', ['class' => 'px-single recE5px recS5px recD5px']) .                $this->html->abreTagAberta('input', ['type' => $type, 'class' => 'px', 'name' => $name, 'id' => $id, 'value' => $cod]) .                $this->html->abreTagFechada('span', ['class' => 'lbl']) .                $this->html->fechaTag('label') .                $this->html->fechaTag('td');    }}
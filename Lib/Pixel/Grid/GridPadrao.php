<?php/** * *    Sappiens Framework *    Copyright (C) 2014, BRA Consultoria * *    Website do autor: www.braconsultoria.com.br/sappiens *    Email do autor: sappiens@braconsultoria.com.br * *    Website do projeto, equipe e documentação: www.sappiens.com.br *    *    Este programa é software livre; você pode redistribuí-lo e/ou *    modificá-lo sob os termos da Licença Pública Geral GNU, conforme *    publicada pela Free Software Foundation, versão 2. * *    Este programa é distribuído na expectativa de ser útil, mas SEM *    QUALQUER GARANTIA; sem mesmo a garantia implícita de *    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM *    PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais *    detalhes. *  *    Você deve ter recebido uma cópia da Licença Pública Geral GNU *    junto com este programa; se não, escreva para a Free Software *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA *    02111-1307, USA. * *    Cópias da licença disponíveis em /Sappiens/_doc/licenca * *//** *   @author Pablo Vanni - pablovanni@gmail.com *   @since 18/11/2005 *   Última Atualização: 13/10/2014 *   Atualizada Por: Pablo Vanni - pablovanni@gmail.com *   Última Atualização: 26/01/2015 *   Atualizada Por: Feliphe "O Retaliador" Bueno - feliphezion@gmail.com *   @name Cria uma grid de resultados com paginação */namespace Pixel\Grid;class GridPadrao{    private $con;    private $paginacao;    private $html;    private $botoes;    private $modoImpressao;    private $grid;    /**     * @param \Zion\Banco\Conexao $con     */    public function __construct(\Zion\Banco\Conexao $con = NULL)    {        $this->grid = new Grid();        $this->con = (!\is_object($con)) ? \Zion\Banco\Conexao::conectar() : $this->con = $con;        $this->paginacao = new \Pixel\Paginacao\Paginacao($con);        $this->html = new \Zion\Layout\Html();        $this->botoes = new GridBotoes();        $this->grid->setSelecaoMultipla(true);        //Padrões Iniciais        $this->grid->setTipoOrdenacao(\filter_input(\INPUT_GET, 'to'));        $this->grid->setQuemOrdena(\filter_input(\INPUT_GET, 'qo'));        $this->grid->setPaginaAtual(\filter_input(\INPUT_GET, 'pa'));        $this->grid->setQLinhas(SIS_LINHAS_GRID);    }    private function tituloGridPadrao()    {        $colunas = $this->grid->getColunas();        $selecao = $this->grid->getSelecao();        $html = $this->html->abreTagAberta('thead');        $html .= $this->html->abreTagAberta('tr');        if ($selecao === true) {            $html .= $this->html->abreTagFechada('th');        }        //Titulos        foreach ($colunas as $coluna => $titulo) {            $classAlinha = $this->grid->getAlinhamento($coluna);            $html .= $this->html->abreTagAberta('th', ['class' => $classAlinha]);            $html .= $this->grid->ordena($titulo, $coluna);            $html .= $this->html->fechaTag('th');        }        $html .= $this->html->fechaTag('tr');        $html .= $this->html->fechaTag('thead');        return $html;    }    /**     * 	Contrução da Grid de Dados     * 	@param Opcoes Array - Indica se cada item deve ser habilitado     * 	@param QLinhas Inteiro - Número de Resultados por pagina     * 	@param PaginaAtual Inteiro - Número da Pagina Atual     * 	@param Parametros String - Query String com parametros nescessarios      * 	@return String     */    public function montaGridPadrao()    {        //Modo de impressão        $this->modoImpressao = false;        if (\filter_input(\INPUT_GET, 'sisModoImpressao')) {            $this->modoImpressao = true;            $this->grid->setQLinhas(0);            $this->setSelecao(false);        }        //Recupera Valores        $sql = $this->grid->getSql();        $tabelaMestra = $this->grid->getTabelaMestra();        $sqlContador = $this->grid->getSqlContador();        $filtroAtivo = $this->grid->getFiltroAtivo();        $limitAtivo = $this->grid->getLimitAtivo();        $listados = \array_keys($this->grid->getColunas());        $chave = $this->grid->getChave();        $aliasOrdena = $this->grid->getAliasOrdena();        $formatarComo = $this->grid->getFormatarComo();        $selecao = $this->grid->getSelecao();        $qLinhas = $this->grid->getQLinhas();        $this->paginacao->setSql($sql);        //Verifica se o SQL não esta Vazio        if (empty($sql)) {            throw new \Exception("Valor selecionado inválido!");        }        //Se Formatações existem, intancie funções de Validação        if (!empty($formatarComo)) {            $fPHP = \Zion\Validacao\Valida::instancia();        }        //Iniciando valores        $i = 0;        $html = "";        //Monta Paginanação        if ($qLinhas > 0) {            //Setando Valores para paginação            $this->paginacao->setTabelaMestra($tabelaMestra);            $this->paginacao->setSqlContador($sqlContador);            $this->paginacao->setFiltroAtivo($filtroAtivo);            $this->paginacao->setLimitAtivo($limitAtivo);            $this->paginacao->setChave($chave);            $this->paginacao->setAliasOrdena($aliasOrdena);            $this->paginacao->setQLinhas($qLinhas);            $this->paginacao->setPaginaAtual($this->grid->getPaginaAtual());            $this->paginacao->setTipoOrdenacao($this->grid->getTipoOrdenacao());            $this->paginacao->setQuemOrdena($this->grid->getQuemOrdena());            $this->paginacao->setMetodoFiltra($this->grid->getMetodoFiltra());            $this->paginacao->setAlterarLinhas($this->grid->getAlterarLinhas());            $rs = $this->paginacao->rsPaginado();        } else {            if (\is_string($sql)) {                $rs = $this->con->executar($sql);            } else {                $rs = $sql->execute();            }        }        $nLinhas = $this->con->nLinhas($rs);        //Contruindo grid        if ($nLinhas > 0) {            //$html .= '<!-- starts: sisContainerGrid (opened by class GridBotoes) -->';            //$html .= $this->html->abreTagAberta('div', ['id' => 'sisContainerGrid']);                $html.= '<form name="formGrid" id="formGrid">';            $html .= $this->html->abreTagAberta('div', ['id' => 'sisContainerPaginacao', 'class' => 'clearfix', 'style' => 'position:absolute; right:0; top:0;']);            $html .= $this->paginacao->listaResultados();            $html .= $this->html->fechaTag('div');            $html .= $this->html->abreTagAberta('div', ['id' => 'sisGridControl']);            $html .= $this->html->abreTagAberta('div', ['class' => 'table-primary']);            //$html .= $this->getFilters('Aqui vem os filtros');            $html .= $this->html->abreTagAberta('table', ['class' => 'table table-bordered']);            //Atributo de substituicao            $subs = $this->grid->getSubstituirPor();            //Objeto de Converssão (Objeto Pastor :D)            $objC = $this->grid->getObjetoConverte();            //Estilos de um resultado (ESTILO DE RESULTADO ÚNICO)            $eRU = $this->grid->getCondicaoResultadoUnico();            $eTR = $this->grid->getCondicaoTodosResultados();            while ($linha = $rs->fetch()) {                $i += 1;                $cRT = "";                if (\is_array($eTR)) {                    foreach ($eTR as $rT) {                        if ($this->grid->resultadoEval($linha, array($rT[0])) === true) {                            $cRT = $rT[1];                        }                    }                }                if ($i == 1) {                    $html .= $this->tituloGridPadrao();                }                $html .= $this->html->abreTagAberta('tbody');                $html .= $this->html->abreTagAberta('tr');                if ($selecao === true) {                    //exit($chave);                    $html .= $this->thCheck($linha[$chave]);                }                foreach ($listados as $value) {                    //Valor com possivel converssão                    if (\is_array($objC) and \key_exists($value, $objC)) {                        $valorItem = $this->grid->converteValor($linha, $objC[$value]);                    } else {                        $valorItem = $linha[$value];                    }                    //Formatação                    if (!empty($formatarComo)) {                        if (\array_key_exists($value, $formatarComo)) {                            $como = \strtoupper($formatarComo[$value]);                            switch ($como) {                                case "DATA" : $valorItem = $fPHP->data()->converteData($valorItem);                                    break;                                case "DATAHORA": $valorItem = $fPHP->data()->converteDataHora($valorItem);                                    break;                                case "NUMERO" : $valorItem = $fPHP->numero()->floatCliente($valorItem);                                    break;                                case "MOEDA" : $valorItem = $fPHP->numero()->moedaCliente($valorItem);                                    break;                            }                        }                    }                    //Valor com possível substituicao                    if (\is_array($subs) and \key_exists($value, $subs)) {                        if (\key_exists($valorItem, $subs[$value])) {                            $valorItem = $subs[$value][$valorItem];                        } else {                            if ($valorItem == '') {                                $valorItem = \current($subs[$value]);                            }                        }                    }                    //Estilo de Resultado Único                    $cRU = "";                    if (\is_array($eRU) and \key_exists($value, $eRU)) {                        if ($this->grid->resultadoEval($linha, $eRU[$value]) === true) {                            $cRU = $eRU[$value][1];                        }                    }                    //Alinhamento                    $classAlinha = $this->grid->getAlinhamento($value);                    $html .= $this->html->abreTagAberta('td', ['class' => $classAlinha]);                    $html .= ($valorItem == "") ? "&nbsp;" : $valorItem;                    $html .= $this->html->fechaTag('td');                }                $html .= $this->html->fechaTag('tr');                $html .= $this->html->fechaTag('tbody');            }            $html .= $this->html->fechaTag('table');            $html .= $this->html->fechaTag('div');            //$html .= '<!-- ends: grid-control -->';            $html .= $this->html->fechaTag('div');            //$html .= $this->html->fechaTag('div');            //$html .= '<!-- ends: sisContainerGrid (opened by class GridBotoes) -->';             $html .= '</form>';        } else {            $html .= $this->html->abreTagAberta('div', ['id' => 'sisContainerPaginacao', 'class' => 'clearfix']);            $html .= $this->html->fechaTag('div');            $html .= $this->html->abreTagAberta('div', ['id' => 'sisGridControl']);            $html .= $this->html->abreTagAberta('div', ['class' => 'table-primary']);            //$html .= $this->getFilters('Aqui vem os filtros');            $html .= $this->html->fechaTag('div');            $html .= $this->html->fechaTag('div');            $html .= $this->html->abreTagAberta('div', ['class' => 'table-footer alinD']);            $html .= $this->html->abreTagFechada('i', ['class' => 'fa fa-frown-o']);            $html .= $this->html->entreTags('em', 'Oops! Nenhum resultado encontrado...');            $html .= $this->html->fechaTag('div');            return $html;        }        return $html . $this->paginacao->getResultado();    }    public function getFilters($filtros)    {        $template = new \Pixel\Template\Template();        $html = '';        $html .= $template->getPanel('box-filters', 'Filtros especiais', $filtros, ['visible' => 'hidden', 'iconTitle' => 'fa fa-filter']);        return $html;    }    private function thCheck($cod)    {        if ($this->grid->getSelecaoMultipla() === true) {            $type = 'checkbox';            $name = 'sisReg[]';        } else {            $type = 'radio';            $name = 'sisReg';        }        $id = 'sisReg' . $cod;        return $this->html->abreTagAberta('td', ['class' => 'l45px']) .                $this->html->abreTagAberta('label', ['class' => 'px-single recE5px recS5px recD5px']) .                $this->html->abreTagAberta('input', ['type' => $type, 'class' => 'px', 'name' => $name, 'id' => $id, 'value' => $cod]) .                $this->html->abreTagFechada('span', ['class' => 'lbl']) .                $this->html->fechaTag('label') .                $this->html->fechaTag('td');    }#####################################################################    public function setTipoOrdenacao($valor)    {        $this->grid->setTipoOrdenacao($valor);    }    public function setQuemOrdena($valor)    {        $this->grid->setQuemOrdena($valor);    }    public function setSql($valor)    {        $this->grid->setSql($valor);    }    public function setSqlContador($valor)    {        $this->grid->setSqlContador($valor);    }    public function setFiltroAtivo($valor)    {        $this->grid->setFiltroAtivo($valor);    }    public function setLimitAtivo($valor)    {        $this->grid->setLimitAtivo($valor);    }    public function setChave($valor)    {        $this->grid->setChave($valor);    }    public function setAliasOrdena($valor)    {        $this->grid->setAliasOrdena($valor);    }    public function setMetodoFiltra($valor)    {        $this->grid->setMetodoFiltra($valor);    }    public function setQLinhas($valor)    {        $this->grid->setQLinhas($valor);    }    public function setPaginaAtual($valor)    {        $this->grid->setPaginaAtual($valor);    }    public function setIrParaPagina($valor)    {        $this->grid->setIrParaPagina($valor);    }    public function setAlterarLinhas($valor)    {        $this->grid->setAlterarLinhas($valor);    }        /**     * Monta um array representativo das colunas da tabela de um banco de dados.     * Por questões de compatibilidade as colunas serão convertidas      * automaticamente para minisculo     * @param array $arrayColunas     * @throws \Exception     */    public function setColunas($arrayColunas)    {        $this->grid->setColunas($arrayColunas);    }    /**     * Monta um array com informações de alinhamento de campos, pode alinhar um     * ou mais campos     * setAlinhamento(['campo1'=>'Esquerda', 'campo2'=>'Centro'],'campo3'=>'Direita');     * @param array $arrayAlinhamento     * @throws \Exception     */    public function setAlinhamento($arrayAlinhamento)    {        $this->grid->setAlinhamento($arrayAlinhamento);    }    public function setCondicaoResultadoUnico($campo, $condicao, $class)    {        $this->grid->setCondicaoResultadoUnico($campo, $condicao, $class);    }    public function setCondicaoTodosResultados($condicao, $class)    {        $this->grid->setCondicaoTodosResultados($condicao, $class);    }    /**     * Usa um objeto, um metodos e a indicação de como usa-los, com a função     * de converter um resultado da grid.     *      * $grid->converterResultado($this, 'mostraIcone', 'moduloClass', ['moduloClass']);     *      * @param object $objeto     * @param string $metodo     * @param string $campo     * @param array $parametrosInternos     * @param array $paremetrosExternos     * @param string $ordem     * @throws \Exception     */    public function converterResultado($objeto, $metodo, $campo, $parametrosInternos = [], $paremetrosExternos = [], $ordem = 'IE')    {        $this->grid->converterResultado($objeto, $metodo, $campo, $parametrosInternos, $paremetrosExternos, $ordem);    }    /**     * Monta um array com informações de ordenação de campos, pode ordenar um     * ou mais campos     *      * $grid->naoOrdenePor(['moduloClass']);     *      * @param array $arrayNaoOrdenePor     * @throws \Exception     */    public function naoOrdenePor($arrayNaoOrdenePor)    {       $this->grid->naoOrdenePor($arrayNaoOrdenePor);    }    /**     * Formata um resultado da grid, pode ser (DATA, DATAHORA, NUMERO, MOEDA)     *      * $grid->setFormatarComo('moduloClass','DATA');     *      * @param string $identificacao     * @param string $como     * @throws \Exception     */    public function setFormatarComo($identificacao, $como)    {        $this->grid->setFormatarComo($identificacao, $como);    }    /**     * Indica se a grid deve apresentar checkbox ou radiobox de seleção      * de resultados     * @param bool $selecao     */    public function setSelecao($selecao)    {        $this->grid->setSelecao($selecao);    }    /**     * Por padrão a seleção multipla é verdadeira, no caso de setar false para      * este metodo a grid irá trazer radios para a seleção de resultados.     * @param bool $selecaoMultipla     */    public function setSelecaoMultipla($selecaoMultipla)    {        $this->grid->setSelecaoMultipla($selecaoMultipla);    }    /**     * Substitui um valor da grid por um valor equivalente em um array     *      * $grid->substituaPor('moduloVisivelMenu', ['S' => 'Sim', 'N' => 'Não']);     *      * @param string $identificacao     * @param string $por     * @throws \Exception     */    public function substituaPor($identificacao, $por)    {        $this->grid->substituaPor($identificacao, $por);    }}
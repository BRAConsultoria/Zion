<?php/** *   @author Pablo Vanni - pablovanni@gmail.com *   @since 18/11/2005 *   Última Atualização: 13/10/2014 *   Autualizada Por: Pablo Vanni - pablovanni@gmail.com *   @name Cria uma grid de resultados com paginação */namespace Pixel\Grid;class GridVO extends \Zion\Paginacao\PaginacaoVO{    private $colunas; //Array - Array Com Conjunto de Atributos e Titulos a Serem Exibidos na Grid     private $alinhamento; //Array - Array Com Informações de Alinhamento em Cada Campo    private $naoOrdenePor; //Array - Array Com Atrubutos que não devem ser ordenados na grid    private $condicaoResultadoUnico; //String - Recebe uma estring com uma condição PHP para se obter uma particularidade para um unico resultado    private $condicaoTodosResultados; //String - Recebe uma estring com uma condição PHP para se obter uma particularidade para uma linha de resultados    private $objConverte; //Objeto - Recebe Um objeto de Converssão para os elementos da grid 	    private $formatarComo; //Array que recebe o campo e como deve formata-lo    private $selecao; //Bool - Informa se a grid deve ter coluna de seleção    private $selecaoMultipla; //Bool - Informa se a grid deve ser apresentada com seleção Multipla ou simples    private $substituirPor; //Array - Troca os resultados da grid por valores especificados pelo usuário        public function __construct()    {        parent::__construct();        $this->colunas = [];        $this->alinhamento = [];        $this->naoOrdenePor = [];        $this->condicaoResultadoUnico = [];        $this->condicaoTodosResultados = [];        $this->objConverte = [];        $this->formatarComo = [];        $this->selecao = true;        $this->selecaoMultipla = false;    }    public function setColunas($valor)    {        if (!\is_array($valor)) {            throw new \Exception("Grid: Colunas informado inválido!");        }                $this->colunas = \array_change_key_case($valor, \CASE_LOWER);    }    public function getColunas()    {        return $this->colunas;    }    public function setAlinhamento($valor)    {        if (!is_array($valor)) {            throw new \Exception("Grid: Alinhamento informado inválido!");        }        $this->alinhamento = \array_change_key_case($valor, \CASE_LOWER);    }    public function getAlinhamento($valor)    {        if (!\array_key_exists($valor, $this->alinhamento)) {            return '';        }        switch (\strtoupper($this->alinhamento[$valor])) {            case 'DIREITA': return ' alinD ';            case 'CENTRO': return ' alinC ';            default: return '';        }    }    public function setCondicaoResultadoUnico($campo, $condicao, $class)    {        $this->condicaoResultadoUnico[strtolower($campo)] = [$condicao, $class];    }    public function getCondicaoResultadoUnico()    {        return $this->condicaoResultadoUnico;    }    public function setCondicaoTodosResultados($condicao, $class)    {        $this->condicaoTodosResultados[] = [$condicao, $class];    }    public function getCondicaoTodosResultados()    {        return $this->condicaoTodosResultados;    }    public function converterResultado($objeto, $metodo, $campo, $parametrosInternos = null, $paremetrosExternos = null, $ordem = 'IE')    {        if (!is_object($objeto)) {            throw new \Exception("Grid: Objeto informado inválido!");        }        if (!is_string($metodo)) {            throw new \Exception("Grid: Metodo informado inválido!");        }        if (!is_string($campo)) {            throw new \Exception("Grid: Campo informado inválido!");        }        if (!empty($parametrosInternos)) {            if (!is_array($parametrosInternos)) {                throw new \Exception("Grid: ParametrosInternos informado inválido!");            }                        $parametrosInternos = \array_map('strtolower', $parametrosInternos);        }        if (!empty($paremetrosExternos)) {            if (!is_array($paremetrosExternos)) {                throw new \Exception("Grid: ParametrosInternos informado inválido!");            }                        $paremetrosExternos = \array_map('strtolower', $paremetrosExternos);        }        if (!in_array(strtoupper($ordem), ["IE", "EI"])) {            throw new \Exception("Grid: Ordem informado inválido!");        }        $campoMinusculo = \strtolower($campo);                        $this->objConverte[$campoMinusculo] = [$objeto, $metodo, $campoMinusculo, $parametrosInternos, $paremetrosExternos, $ordem];    }    public function getObjetoConverte()    {        return $this->objConverte;    }    public function naoOrdenePor($valor)    {        if (!is_array($valor)) {            throw new \Exception("Grid: NaoOrdenePor informado inválido!");        }               $this->naoOrdenePor = \array_map('strtolower', $valor);    }    public function getNaoOrdenePor()    {        return $this->naoOrdenePor;    }    public function setFormatarComo($identificacao, $como)    {        if (!is_string($identificacao)) {            throw new \Exception("Grid: FormatarComo parametro 1 informado inválido!");        }        if (!is_string($como)) {            throw new \Exception("Grid: FormatarComo parametro 2 informado inválido!");        }        $this->formatarComo[\strtolower($identificacao)] = $como;    }    public function getFormatarComo()    {        return $this->formatarComo;    }    public function getSelecao()    {        return $this->selecao;    }    public function setSelecao($selecao)    {        $this->selecao = $selecao;    }    public function getSelecaoMultipla()    {        return $this->selecaoMultipla;    }    public function setSelecaoMultipla($selecaoMultipla)    {        $this->selecaoMultipla = $selecaoMultipla;    }        public function substituaPor($identificacao, $por)    {        if (!is_string($identificacao)) {            throw new \Exception("Grid: substituaPor parametro 1 informado inválido!");        }        if (!is_array($por)) {            throw new \Exception("Grid: substituaPor parametro 2 informado inválido!");        }        $this->substituirPor[\strtolower($identificacao)] = $por;    }        public function getSubstituirPor()    {        return $this->substituirPor;    }}